<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Zaber</name>
    </assembly>
    <members>
        <member name="T:Zaber.DeviceCollection">
            <summary>
            A collection of <see cref="T:Zaber.ZaberDevice"/> objects. It's used to represent
            an Alias device number.
            </summary>
            <remarks>
            This class is both a ZaberDevice and a collection of them. Any requests
            you send to it get received by all its member devices. (The hardware handles
            that.) Any request or response events from its members will also be raised
            by the collection. (The software handles that.)
            </remarks>
        </member>
        <member name="T:Zaber.ZaberDevice">
            <summary>
            Represents a device attached to the computer's port.
            </summary>
            <remarks>The ZaberDevice provides an event-driven interface to the device.
            Check out the <see cref="T:Zaber.Conversation"/> class for request-driven 
            interface.</remarks>
        </member>
        <member name="M:Zaber.ZaberDevice.OnDataPacketSent(System.Object,Zaber.DataPacketEventArgs)">
            <summary>
            Handle a data packet sent to the port and raise a corresponding event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Zaber.ZaberDevice.OnDataPacketReceived(System.Object,Zaber.DataPacketEventArgs)">
            <summary>
            Handle a data packet received from the port and raise a corresponding event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks>
            This is internal so that the port facade can manually raise the first response
            received from this device.
            </remarks>
        </member>
        <member name="M:Zaber.ZaberDevice.CreateDeviceMessage(Zaber.DataPacket)">
            <summary>
            Converts a data packet into a device message by populating the
            message id and command info fields.
            </summary>
            <param name="dataPacket">The data packet to copy</param>
            <returns>A device message with the new fields populated</returns>
        </member>
        <member name="M:Zaber.ZaberDevice.Send(Zaber.Command)">
            <summary>
            Convenience method for commands that ignore the data value. 
            It sends 0 as the data value.
            </summary>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
        </member>
        <member name="M:Zaber.ZaberDevice.Send(Zaber.Command,System.Int32)">
            <summary>
            Send a command to this device without using a message id.
            </summary>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
            <param name="data">See <see cref="P:Zaber.DataPacket.Data"/>.</param>
        </member>
        <member name="M:Zaber.ZaberDevice.Send(Zaber.Command,System.Int32,System.Byte)">
            <summary>
            Send a command to this device.
            </summary>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
            <param name="data">See <see cref="P:Zaber.DataPacket.Data"/>.</param>
            <param name="messageId">See <see cref="P:Zaber.DeviceMessage.MessageId"/>.</param>
        </member>
        <member name="M:Zaber.ZaberDevice.SendDelayed(Zaber.Command,System.Int32,System.Byte)">
            <summary>
            Send a command to this device after a delay.
            </summary>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
            <param name="data">See <see cref="P:Zaber.DataPacket.Data"/>.</param>
            <param name="messageId">See <see cref="P:Zaber.DeviceMessage.MessageId"/>.</param>
            <remarks>See <see cref="M:Zaber.IZaberPort.SendDelayed(System.Byte,Zaber.Command,System.Int32)"/> for the details
            of how the delay works. This command may never be sent, if the port
            gets closed.
            </remarks>
            <returns>The data packet that will be sent, or null if the port is
            already closed.</returns>
        </member>
        <member name="M:Zaber.ZaberDevice.OnMessageReceived(Zaber.DeviceMessageEventArgs)">
            <summary>
            Protected method to allow derived classes to raise the 
            MessageReceived event.
            </summary>
            <param name="e">The details of the message.</param>
        </member>
        <member name="M:Zaber.ZaberDevice.OnMessageSent(Zaber.DeviceMessageEventArgs)">
            <summary>
            Protected method to allow derived classes to raise the 
            MessageSent event.
            </summary>
            <param name="e">The details of the message.</param>
        </member>
        <member name="P:Zaber.ZaberDevice.AreMessageIdsEnabled">
            <summary>
            Enables or disables message ids mode on this device.
            </summary>
            <remarks>
            <para>Message ids mode uses id numbers to match each response to 
            the request that triggered it. Message ids are also known as
            logical channels.</para>
            </remarks>
            <seealso cref="P:Zaber.ZaberPortFacade.AreMessageIdsEnabled"/>
            <seealso cref="P:Zaber.DeviceMessage.MessageId"/>
        </member>
        <member name="P:Zaber.ZaberDevice.Port">
            <summary>
            The port to send requests to and receive responses from.
            </summary>
        </member>
        <member name="P:Zaber.ZaberDevice.Description">
            <summary>
            Gets a description of the device in a standard format.
            </summary>
        </member>
        <member name="P:Zaber.ZaberDevice.DeviceType">
            <summary>
            The device type determines the list of supported commands.
            </summary>
        </member>
        <member name="P:Zaber.ZaberDevice.DeviceNumber">
            <summary>
            The device number is used as an address to send requests to.
            </summary>
        </member>
        <member name="E:Zaber.ZaberDevice.MessageReceived">
             <summary>
             Raised when the device receives a data packet back from the port.
             </summary>
             <example>
             Register an event handler and print any received data to the 
             output console.
             <code>
             private void Register(ZaberDevice device)
             {
                 device.MessageReceived += 
                     new EventHandler&lt;DeviceMessageEventArgs&gt;(device_MessageReceived);
             }
            
             void device_MessageReceived(object sender, DeviceMessageEventArgs e)
             {
                 System.Console.Out.WriteLine(
                     "Device {0}: {1}({2})",
                     e.DeviceMessage.DeviceNumber,
                     e.DeviceMessage.Command,
                     e.DeviceMessage.Data);
             }
             </code>
             </example>
             <remarks>
             Be careful when handling this event, because it is usually raised 
             from a background thread. See 
             <see cref="E:Zaber.IZaberPort.DataPacketReceived"/> for details on how to
             handle events from background threads and how to just avoid them.
             </remarks>
        </member>
        <member name="E:Zaber.ZaberDevice.MessageSent">
            <summary>
            Raised when the device sends a packet to the port.
            </summary>
            <remarks>
            Be careful when handling this event, because it is occasionally raised 
            from a background thread. See 
            <see cref="E:Zaber.IZaberPort.DataPacketReceived"/> for details on how to
            handle events from background threads and how to just avoid them.
            </remarks>
        </member>
        <member name="P:Zaber.ZaberDevice.HasSubscribers">
            <summary>
            Gets a flag showing whether this device has any objects subscribed
            to its events. (Used for testing.)
            </summary>
        </member>
        <member name="P:Zaber.ZaberDevice.IsSingleDevice">
            <summary>
            True if this is a single device, and not a collection of devices.
            </summary>
        </member>
        <member name="M:Zaber.DeviceCollection.Add(Zaber.ZaberDevice)">
            <summary>
            Adds a device to the collection.
            </summary>
            <param name="item">The device to add to the collection</param>
        </member>
        <member name="M:Zaber.DeviceCollection.Clear">
            <summary>
            Removes all devices from the collection.
            </summary>
        </member>
        <member name="M:Zaber.DeviceCollection.Contains(Zaber.ZaberDevice)">
            <summary>
            Determines whether the collection contains a specific device.
            </summary>
            <param name="item">The device to locate in the collection</param>
            <returns>true if the device is found in the collection, otherwise false.</returns>
        </member>
        <member name="M:Zaber.DeviceCollection.CopyTo(Zaber.ZaberDevice[],System.Int32)">
             <summary>
             Copies the devices in the collection to a
                 System.Array, starting at a particular System.Array index.
             </summary>
             <param name="array">The one-dimensional System.Array that is the destination of the devices
                 copied from the collection. The System.Array must
                 have zero-based indexing.
            </param>
             <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
             <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
             <exception cref="T:System.ArgumentNullException">array is null.</exception>
             <exception cref="T:System.ArgumentException">arrayIndex is equal 
             to or greater than the
                 length of array.-or-The number of elements in the source collection
                 is greater than the available space from arrayIndex to the end of the destination
                 array.</exception>
        </member>
        <member name="M:Zaber.DeviceCollection.Remove(Zaber.ZaberDevice)">
            <summary>
            Removes the first occurrence of a specific device from the collection.
            </summary>
            <param name="item">The device to remove from the collection.</param>
            <returns>true if the device was successfully removed from the collection,
                otherwise false. This method also returns false if the device is not found in
                the collection.</returns>
        </member>
        <member name="M:Zaber.DeviceCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>an enumerator that iterates through the collection.</returns>
        </member>
        <member name="M:Zaber.DeviceCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>an enumerator that iterates through the collection.</returns>
        </member>
        <member name="M:Zaber.DeviceCollection.IndexOf(Zaber.ZaberDevice)">
            <summary>
                Searches for the specified device and returns the zero-based index of the
                first occurrence within the entire list.
            </summary>
            <param name="item">The device to locate in the list. The value
                can be null.</param>
            <returns>The zero-based index of the first occurrence of item within the entire 
            list, if found; otherwise, –1.</returns>
        </member>
        <member name="M:Zaber.DeviceCollection.Insert(System.Int32,Zaber.ZaberDevice)">
            <summary>
                Inserts an element into the list at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be null.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.  
            -or- index is greater than <see cref="P:Zaber.DeviceCollection.Count"/>.</exception>
        </member>
        <member name="M:Zaber.DeviceCollection.RemoveAt(System.Int32)">
            <summary>
                Removes the element at the specified index of the list.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.  
            -or- index is equal to or greater than <see cref="P:Zaber.DeviceCollection.Count"/>.</exception>
        </member>
        <member name="P:Zaber.DeviceCollection.IsSingleDevice">
            <summary>
            True if this is a single device, and not a collection of devices.
            </summary>
        </member>
        <member name="P:Zaber.DeviceCollection.Count">
            <summary>
            Gets the number of devices contained in the collection.
            </summary>
        </member>
        <member name="P:Zaber.DeviceCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Zaber.DeviceCollection.Item(System.Int32)">
            <summary>
                Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.  
            -or- index is equal to or greater than <see cref="P:Zaber.DeviceCollection.Count"/>.</exception>
        </member>
        <member name="T:Zaber.DeviceMessageEventArgs">
            <summary>
            Notification of a request or response from a <see cref="T:Zaber.ZaberDevice"/>.
            </summary>
        </member>
        <member name="M:Zaber.DeviceMessageEventArgs.#ctor(Zaber.DeviceMessage)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="deviceMessage">See <see cref="P:Zaber.DeviceMessageEventArgs.DeviceMessage"/></param>
        </member>
        <member name="P:Zaber.DeviceMessageEventArgs.DeviceMessage">
            <summary>
            The details of the device's request or response.
            </summary>
        </member>
        <member name="T:Zaber.ActiveMessageIdException">
            <summary>
            This exception is thrown by a <see cref="T:Zaber.Conversation"/> when
            the requested message id is already being used by an active topic.
            </summary>
        </member>
        <member name="T:Zaber.ConversationException">
            <summary>
            This is a base class for all the exceptions that the 
            <see cref="T:Zaber.Conversation"/> class throws. It lets you simplify your 
            catch blocks if you want to treat all exceptions the same.
            </summary>
        </member>
        <member name="M:Zaber.ConversationException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
        </member>
        <member name="M:Zaber.ConversationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
            <param name="ex">The exception that caused this one.</param>
        </member>
        <member name="M:Zaber.ConversationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized
                data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
        </member>
        <member name="M:Zaber.ActiveMessageIdException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
        </member>
        <member name="M:Zaber.ActiveMessageIdException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
            <param name="ex">The exception that caused this one</param>
        </member>
        <member name="M:Zaber.ActiveMessageIdException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized
                data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
        </member>
        <member name="M:Zaber.ActiveMessageIdException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the System.Runtime.Serialization.SerializationInfo
                with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is a null reference.</exception>
        </member>
        <member name="T:Zaber.LoopbackException">
            <summary>
            A loopback connection was detected on a serial port.
            </summary>
            <remarks>A loopback connection
            is a connection from the serial port's send pin to the receive pin. 
            This makes it appear as though the serial port is receiving a copy of 
            every byte it sends. This can happen intentionally when a loopback dongle
            is connected to the serial port, or unintentionally when wires are
            connected incorrectly.</remarks>
        </member>
        <member name="M:Zaber.LoopbackException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display.</param>
        </member>
        <member name="M:Zaber.LoopbackException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
            <param name="ex">The exception that caused this exception</param>
        </member>
        <member name="M:Zaber.LoopbackException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo 
            that holds the serialized object data about the exception being 
            thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext 
            that contains contextual information about the source or 
            destination.</param>
        </member>
        <member name="T:Zaber.PlugIns.PlugInBase">
            <summary>
            A basic implementation of the <see cref="T:Zaber.PlugIns.IPlugIn"/> interface.
            </summary>
            <remarks>
            Plug ins and script templates do not have to derive from this base class!
            The only requirement is to implement the <see cref="T:Zaber.PlugIns.IPlugIn"/> interface.
            This class just provides a simple implementation of all the required
            features except the <see cref="M:Zaber.PlugIns.PlugInBase.Run"/> method. It also implements helper
            methods like <see cref="M:Zaber.PlugIns.PlugInBase.Sleep(System.Int32)"/> and <see cref="M:Zaber.PlugIns.PlugInBase.CheckForCancellation"/>.
            </remarks>
        </member>
        <member name="T:Zaber.PlugIns.IPlugIn">
            <summary>
            This is the interface implemented by plug ins and scripts that
            the script runner can execute.
            </summary>
        </member>
        <member name="M:Zaber.PlugIns.IPlugIn.Run">
            <summary>
            Run the plug in's operation.
            </summary>
            <remarks>
            The method returns when the operation has completed. Exceptions in the
            operation will be thrown from this method.
            </remarks>
        </member>
        <member name="M:Zaber.PlugIns.IPlugIn.Cancel">
            <summary>
            Ask the operation to stop running.
            </summary>
            <remarks>
            <para>This is just a request, plug ins do not have to respect it. A common
            implementation is to set an IsCancelled flag and leave it up to
            the running code to check the flag at regular intervals.</para>
            <para>If a plug in does abort its operation it can either return
            normally, or throw an exception. 
            <see cref="T:System.OperationCanceledException"/> is a good exception
            to throw in this case.</para>
            </remarks>
        </member>
        <member name="P:Zaber.PlugIns.IPlugIn.PortFacade">
            <summary>
            Gets or sets the port facade that gives access to all the devices 
            and conversations.
            </summary>
            <remarks>
            The port facade may or may not be open when it is passed to this 
            property. Scripts can check by using the 
            <see cref="P:Zaber.ZaberPortFacade.IsOpen"/> property.
            The plug in does not own this facade and will not dispose it 
            during Dispose().
            </remarks>
        </member>
        <member name="P:Zaber.PlugIns.IPlugIn.Conversation">
            <summary>
            Gets or sets the conversation that was selected by the user.
            </summary>
            <value>
            May be null if none was selected, or if the port hasn't been opened
            yet.
            </value>
            <remarks>
            The plug in does not own this conversation and will not dispose it 
            during Dispose().
            </remarks>
        </member>
        <member name="P:Zaber.PlugIns.IPlugIn.Input">
            <summary>
            Gets or sets a text reader that will provide input to the script.
            </summary>
            <remarks>
            The plug in owns this reader and will dispose it during 
            Dispose().
            </remarks>
        </member>
        <member name="P:Zaber.PlugIns.IPlugIn.Output">
            <summary>
            Gets or sets a text writer that will receive output from the script.
            </summary>
            <remarks>
            The plug in owns this writer and will dispose it during 
            Dispose().
            </remarks>
        </member>
        <member name="M:Zaber.PlugIns.PlugInBase.Run">
            <summary>
            Run the plug in's operation.
            </summary>
            <remarks>
            The method returns when the operation has completed. Exceptions in the
            operation will be thrown from this method.
            </remarks>
        </member>
        <member name="M:Zaber.PlugIns.PlugInBase.Cancel">
            <summary>
            Ask the operation to stop running.
            </summary>
            <remarks>
            Sets the <see cref="P:Zaber.PlugIns.PlugInBase.IsCanceled"/> property to true. Derived 
            classes' <see cref="M:Zaber.PlugIns.PlugInBase.Run"/> methods can call 
            <see cref="M:Zaber.PlugIns.PlugInBase.CheckForCancellation"/> to throw an exception
            if the operation has been canceled.
            </remarks>
        </member>
        <member name="M:Zaber.PlugIns.PlugInBase.Log(System.Object,System.Exception)">
            <summary>
            Write a message to the application log file.
            </summary>
            <param name="message">The object to write to the file.</param>
            <param name="exception">An exception to write to the log file,
            along with its stack trace.</param>
            <remarks>The message will be written to the application's log
            file at the Info level, coming from the Zaber.PlugIns.PlugInBase
            class.</remarks>
        </member>
        <member name="M:Zaber.PlugIns.PlugInBase.Log(System.Object)">
            <summary>
            Write a message to the application log file.
            </summary>
            <param name="message">The object to write to the file.</param>
            <remarks>The message will be written to the application's log
            file at the Info level, coming from the Zaber.PlugIns.PlugInBase
            class.</remarks>
        </member>
        <member name="M:Zaber.PlugIns.PlugInBase.Sleep(System.Int32)">
            <summary>
            Pause the operation for a number of milliseconds.
            </summary>
            <param name="milliseconds">The length of time to pause</param>
            <exception cref="T:System.OperationCanceledException">If the operation was 
            canceled before or during the sleep.</exception>
        </member>
        <member name="M:Zaber.PlugIns.PlugInBase.Sleep(System.Int32,Zaber.PlugIns.SleepCancellationResponse)">
            <summary>
            Pause the operation for a number of milliseconds.
            </summary>
            <param name="milliseconds">The length of time to pause</param>
            <param name="cancellationResponse">Specifies the desired response
            when <see cref="M:Zaber.PlugIns.PlugInBase.Cancel"/> is called before or during the sleep.</param>
            <exception cref="T:System.OperationCanceledException">If the operation was 
            canceled before or during the sleep.</exception>
        </member>
        <member name="M:Zaber.PlugIns.PlugInBase.CheckForCancellation">
            <summary>
            Throw an exception if the operation has been canceled. Otherwise,
            do nothing.
            </summary>
            <exception cref="T:System.OperationCanceledException">The operation was
            canceled by a call to <see cref="M:Zaber.PlugIns.PlugInBase.Cancel"/></exception>
        </member>
        <member name="M:Zaber.PlugIns.PlugInBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
                resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Zaber.PlugIns.PlugInBase.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
                resetting unmanaged resources.
            </summary>
            <param name="isDisposing">True if the object is being disposed, and not
            garbage collected.</param>
        </member>
        <member name="P:Zaber.PlugIns.PlugInBase.Output">
            <summary>
            Gets or sets a text writer that will receive output from the script.
            </summary>
            <remarks>
            The plug in owns this writer and will dispose it during 
            <see cref="M:Zaber.PlugIns.PlugInBase.Dispose"/>.
            </remarks>
        </member>
        <member name="P:Zaber.PlugIns.PlugInBase.Input">
            <summary>
            Gets or sets a text reader that will provide input to the script.
            </summary>
            <remarks>
            The plug in owns this reader and will dispose it during 
            <see cref="M:Zaber.PlugIns.PlugInBase.Dispose"/>.
            </remarks>
        </member>
        <member name="P:Zaber.PlugIns.PlugInBase.Conversation">
            <summary>
            Gets or sets the conversation that was selected by the user.
            </summary>
            <value>
            May be null if none was selected, or if the port hasn't been opened
            yet.
            </value>
            <remarks>
            The plug in does not own this conversation and will not dispose it 
            during <see cref="M:Zaber.PlugIns.PlugInBase.Dispose"/>.
            </remarks>
        </member>
        <member name="P:Zaber.PlugIns.PlugInBase.PortFacade">
            <summary>
            Gets or sets the port facade that gives access to all the devices 
            and conversations.
            </summary>
            <remarks>
            The port facade may or may not be open when it is passed to this 
            property. Scripts can check by using the 
            <see cref="P:Zaber.ZaberPortFacade.IsOpen"/> property.
            The plug in does not own this facade and will not dispose it 
            during <see cref="M:Zaber.PlugIns.PlugInBase.Dispose"/>.
            </remarks>
        </member>
        <member name="P:Zaber.PlugIns.PlugInBase.IsCanceled">
            <summary>
            A flag that is set to true when <see cref="M:Zaber.PlugIns.PlugInBase.Cancel"/> is called.
            </summary>
        </member>
        <member name="T:Zaber.TSeriesPort">
            <summary>
            Encapsulates serial port settings, and translates between the byte 
            streams and the DataPacket structure.
            </summary>
        </member>
        <member name="T:Zaber.IZaberPort">
            <summary>
            Represents a communication port with Zaber devices attached, and
            translates between the byte streams and the DataPacket structure.
            </summary>
        </member>
        <member name="M:Zaber.IZaberPort.GetPortNames">
            <summary>
            Get a list of all available ports.
            </summary>
            <returns>An array of port names, one of which should be passed to 
            <see cref="M:Zaber.IZaberPort.Open(System.String)"/>.</returns>
        </member>
        <member name="M:Zaber.IZaberPort.Open(System.String)">
            <summary>
            Open the port to begin sending and receiving data. Be sure to call 
            <see cref="M:Zaber.IZaberPort.Close"/> or <see cref="M:System.IDisposable.Dispose"/> when 
            you are finished with the port.
            </summary>
            <param name="portName">Should match one of the entries returned from
            <see cref="M:Zaber.IZaberPort.GetPortNames"/></param>
        </member>
        <member name="M:Zaber.IZaberPort.Send(System.Byte,Zaber.Command)">
            <summary>
            Convenience method for commands that ignore the data value. 
            It sends 0 as the data value.
            </summary>
            <param name="deviceNumber">See <see cref="P:Zaber.DataPacket.DeviceNumber"/>.</param>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
        </member>
        <member name="M:Zaber.IZaberPort.Send(System.Byte,Zaber.Command,System.Int32)">
            <summary>
            Send a command to a device on the chain.
            </summary>
            <param name="deviceNumber">See <see cref="P:Zaber.DataPacket.DeviceNumber"/>.</param>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
            <param name="data">See <see cref="P:Zaber.DataPacket.Data"/>.</param>
        </member>
        <member name="M:Zaber.IZaberPort.SendDelayed(System.Byte,Zaber.Command,System.Int32)">
            <summary>
            Send a command to a device on the chain after a delay.
            </summary>
            <param name="deviceNumber">See <see cref="P:Zaber.DataPacket.DeviceNumber"/>.</param>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
            <param name="data">See <see cref="P:Zaber.DataPacket.Data"/>.</param>
            <returns>The data packet that will be sent. You can pass this object
            to <see cref="M:Zaber.IZaberPort.CancelDelayedPacket(Zaber.DataPacket)"/>.</returns>
            <remarks>Wait for <see cref="P:Zaber.IZaberPort.DelayMilliseconds"/> before sending
            the command. If you call this method several times, the commands
            get queued up and sent one at a time with a delay before each one.
            </remarks>
        </member>
        <member name="M:Zaber.IZaberPort.CancelDelayedPacket(Zaber.DataPacket)">
            <summary>
            Cancel a delayed packet that is waiting to be sent.
            </summary>
            <param name="packet">Returned by <see cref="M:Zaber.IZaberPort.SendDelayed(System.Byte,Zaber.Command,System.Int32)"/>.</param>
            <returns>True if the packet will not be sent, false if it has 
            already been sent.</returns>
        </member>
        <member name="M:Zaber.IZaberPort.Close">
            <summary>
            Close and release the serial port. This must be called to avoid
            locking the port when you are finished with it.
            </summary>
        </member>
        <member name="M:Zaber.IZaberPort.ReportInvalidPacket">
            <summary>
            Report that an invalid packet was received by raising the 
            <see cref="E:Zaber.IZaberPort.ErrorReceived"/> event.
            </summary>
            <remarks>This can be called by any higher-level code that decides
            a packet was invalid. An example would be if the device number
            doesn't match any known devices.</remarks>
        </member>
        <member name="E:Zaber.IZaberPort.DataPacketReceived">
             <summary>
             Raised when the port receives data back from the devices. When a complete
             response has been received, it's converted to a <see cref="T:Zaber.DataPacket"/> object and
             sent through this event.
             </summary>
             <example>
             Register an event handler and print any received data to the 
             output console.
             <code>
             private void MyForm_Load(object sender, EventArgs e)
             {
                 port.DataPacketReceived += 
                     new EventHandler&lt;DataPacketEventArgs&gt;(port_DataPacketReceived);
             }
            
             void port_DataPacketReceived(object sender, DataPacketEventArgs e)
             {
                 System.Console.Out.WriteLine(
                     "Device {0}: {1}({2})",
                     e.Data.DeviceNumber,
                     e.Data.Command,
                     e.Data.Data);
             }
             </code>
             </example>
             <remarks>
             <para>
             Be careful when handling this event, because it is usually raised 
             from a background thread. The simplest way to deal with that is not
             to register for this event at all. Use a <see cref="T:Zaber.Conversation"/>
             to coordinate requests and responses instead. It handles all the
             threading issues and just returns the response as the return
             value from <see cref="M:Zaber.Conversation.Request(Zaber.Command,System.Int32)"/>.
             </para>
             <para>If you do want to handle this event safely in your user 
             interface, read the first two sections of this article:
             http://weblogs.asp.net/justin_rogers/articles/126345.aspx
             It shows how to use <c>Control.InvokeRequired</c> and 
             <c>Control.BeginInvoke</c> to move execution back onto the UI
             thread from a background thread.
             </para>
             </remarks>
        </member>
        <member name="E:Zaber.IZaberPort.DataPacketSent">
            <summary>
            Raised when the port sends data to the devices. 
            </summary>
            <remarks>
            Be careful when handling this event, because it is occasionally 
            raised from a background thread. See 
            <see cref="E:Zaber.IZaberPort.DataPacketReceived"/> for details. Some scenarios where
            it can be raised from a background thread are: executing scripts 
            and automatically adjusting message id mode.
            </remarks>
        </member>
        <member name="E:Zaber.IZaberPort.ErrorReceived">
            <summary>
            Raised when the underlying port raises its own <c>ErrorReceived</c> 
            event, or when a partial data packet is received because some bytes
            have been dropped. The type of error is described by
            <see cref="P:Zaber.ZaberPortErrorReceivedEventArgs.ErrorType"/>.
            </summary>
            <remarks>
            Be careful when handling this event, because it is usually raised 
            from a background thread. See <see cref="E:Zaber.IZaberPort.DataPacketReceived"/> for 
            details.
            </remarks>
        </member>
        <member name="P:Zaber.IZaberPort.IsOpen">
            <summary>
            Is the port open?
            </summary>
        </member>
        <member name="P:Zaber.IZaberPort.PortName">
            <summary>
            Gets the port name that was last sent to <see cref="M:Zaber.IZaberPort.Open(System.String)"/>.
            </summary>
            <value>The port name that was last sent to <see cref="M:Zaber.IZaberPort.Open(System.String)"/>, or
            null if <see cref="M:Zaber.IZaberPort.Open(System.String)"/> has not been called.</value>
        </member>
        <member name="P:Zaber.IZaberPort.DelayMilliseconds">
            <summary>
            Get or set the delay period to use with <see cref="M:Zaber.IZaberPort.SendDelayed(System.Byte,Zaber.Command,System.Int32)"/>.
            Defaults to 500.
            </summary>
        </member>
        <member name="P:Zaber.IZaberPort.SendLock">
            <summary>
            Synchronization lock that controls when data packets are sent to
            the port.
            </summary>
            <remarks>If you lock this, then no data packets will be sent until
            you release it.
            </remarks>
        </member>
        <member name="M:Zaber.TSeriesPort.#ctor(System.IO.Ports.SerialPort,Zaber.PacketConverter)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="serialPort">Serial port to communicate with.</param>
            <param name="packetConverter">Used to convert between the byte stream
            and the <see cref="T:Zaber.DataPacket"/> structure.</param>
        </member>
        <member name="M:Zaber.TSeriesPort.GetPortNames">
            <summary>
            Get a list of all available serial ports.
            </summary>
            <returns>An array of port names, one of which should be passed to 
            <see cref="M:Zaber.TSeriesPort.Open(System.String)"/>. The names are sorted.</returns>
        </member>
        <member name="M:Zaber.TSeriesPort.serialPort_DataReceived(System.Object,System.IO.Ports.SerialDataReceivedEventArgs)">
            <summary>
            Receive data from the port.
            </summary>
            <param name="sender">The port</param>
            <param name="e">Details of the data.</param>
        </member>
        <member name="M:Zaber.TSeriesPort.OnDataReceived">
            <summary>
            Process data that was received from the port.
            </summary>
            <remarks>This is protected so it can be triggered during
            testing.</remarks>
        </member>
        <member name="M:Zaber.TSeriesPort.ReadData">
            <summary>
            Read any waiting bytes from the port.
            </summary>
            <returns>Any bytes that were read, or an empty list.</returns>
            <remarks>This is protected so it can be stubbed out during
            testing.</remarks>
        </member>
        <member name="M:Zaber.TSeriesPort.serialPort_ErrorReceived(System.Object,System.IO.Ports.SerialErrorReceivedEventArgs)">
            <summary>
            Receive an error from the port.
            </summary>
            <param name="sender">The port</param>
            <param name="e">Details of the error.</param>
        </member>
        <member name="M:Zaber.TSeriesPort.Open(System.String)">
            <summary>
            Open the port to begin sending and receiving data. Be sure to call 
            <see cref="M:Zaber.TSeriesPort.Dispose"/> when you are finished with
            the port.
            </summary>
            <param name="portName">Should match one of the entries returned from
            <see cref="M:Zaber.TSeriesPort.GetPortNames"/></param>
        </member>
        <member name="M:Zaber.TSeriesPort.Send(System.Byte,Zaber.Command)">
            <summary>
            Convenience method for commands that ignore the data value. 
            It sends 0 as the data value.
            </summary>
            <param name="deviceNumber">See <see cref="P:Zaber.DataPacket.DeviceNumber"/>.</param>
            <param name="command">See <see cref="T:Zaber.Command"/>.</param>
        </member>
        <member name="M:Zaber.TSeriesPort.Send(System.Byte,Zaber.Command,System.Int32)">
            <summary>
            Send a command to a device on the chain.
            </summary>
            <param name="deviceNumber">See <see cref="P:Zaber.DataPacket.DeviceNumber"/>.</param>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
            <param name="data">See <see cref="P:Zaber.DataPacket.Data"/>.</param>
        </member>
        <member name="M:Zaber.TSeriesPort.SendDelayed(System.Byte,Zaber.Command,System.Int32)">
            <summary>
            Send a command to a device on the chain after a delay.
            </summary>
            <param name="deviceNumber">See <see cref="P:Zaber.DataPacket.DeviceNumber"/>.</param>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
            <param name="data">See <see cref="P:Zaber.DataPacket.Data"/>.</param>
            <returns>The data packet that will be sent. The data packet can be
            sent to <see cref="M:Zaber.TSeriesPort.CancelDelayedPacket(Zaber.DataPacket)"/> to stop it from being
            sent.</returns>
            <remarks>Wait for <see cref="P:Zaber.TSeriesPort.DelayMilliseconds"/> before sending
            the command. If you call this method several times, the commands
            get queued up and sent one at a time with a delay before each one.
            </remarks>
        </member>
        <member name="M:Zaber.TSeriesPort.CancelDelayedPacket(Zaber.DataPacket)">
            <summary>
            Cancel a delayed packet that was requested by 
            <see cref="M:Zaber.TSeriesPort.SendDelayed(System.Byte,Zaber.Command,System.Int32)"/>.
            </summary>
            <param name="packet">The packet that was returned by 
            <see cref="M:Zaber.TSeriesPort.SendDelayed(System.Byte,Zaber.Command,System.Int32)"/>.</param>
            <returns>True if the packet was canceled before being sent, otherwise 
            false.</returns>
        </member>
        <member name="M:Zaber.TSeriesPort.WriteData(System.Byte[])">
            <summary>
            Write a stream of bytes to the port.
            </summary>
            <param name="data">The bytes to write</param>
            <remarks>This is protected so that it can be stubbed out during
            testing.</remarks>
        </member>
        <member name="M:Zaber.TSeriesPort.Close">
            <summary>
            Close and release the serial port. This must be called to avoid
            locking the port when you are finished with it.
            </summary>
        </member>
        <member name="M:Zaber.TSeriesPort.OnDelayedSendTimer(System.Object)">
            <summary>
            Handle the timer event for sending delayed requests.
            </summary>
            <param name="ignored">State object for the timer. Not used.</param>
        </member>
        <member name="M:Zaber.TSeriesPort.EnableDelayedSendTimer(System.Boolean)">
            <summary>
            Turn the delayed send timer on or off.
            </summary>
            <remarks>The timer is used for the <see cref="M:Zaber.TSeriesPort.SendDelayed(System.Byte,Zaber.Command,System.Int32)"/> 
            method.</remarks>
            <param name="isEnabled">True to enable the timer, otherwise 
            false.</param>
        </member>
        <member name="M:Zaber.TSeriesPort.ReportInvalidPacket">
            <summary>
            Report that an invalid packet was received by raising the 
            <see cref="E:Zaber.TSeriesPort.ErrorReceived"/> event.
            </summary>
            <remarks>This can be called by any higher-level code that decides
            a packet was invalid. An example would be if the device number
            doesn't match any known devices.</remarks>
        </member>
        <member name="M:Zaber.TSeriesPort.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
                resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Zaber.TSeriesPort.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
                resetting unmanaged resources.
            </summary>
            <param name="isDisposing">True if the object is being disposed, and not
            garbage collected.</param>
        </member>
        <member name="P:Zaber.TSeriesPort.SendLock">
            <summary>
            Synchronization lock that controls when data packets are sent to
            the port.
            </summary>
            <remarks>If you lock this, then no data packets will be sent until
            you release it.
            </remarks>
        </member>
        <member name="P:Zaber.TSeriesPort.PacketConverter">
            <summary>
            Gets the packet converter used to convert between the byte stream 
            and the <see cref="T:Zaber.DataPacket"/> structure.
            </summary>
        </member>
        <member name="P:Zaber.TSeriesPort.SerialPort">
            <summary>
            Gets the serial port to communicate with.
            </summary>
        </member>
        <member name="E:Zaber.TSeriesPort.DataPacketReceived">
             <summary>
             Raised when the port receives data back from the devices. When a complete
             response has been received, it's converted to a <see cref="T:Zaber.DataPacket"/> object and
             sent through this event.
             </summary>
             <example>
             Register an event handler and print any received data to the 
             output console.
             <code>
             private void MyForm_Load(object sender, EventArgs e)
             {
                 port.DataPacketReceived += 
                     new EventHandler&lt;DataPacketEventArgs&gt;(port_DataPacketReceived);
             }
            
             void port_DataPacketReceived(object sender, DataPacketEventArgs e)
             {
                 System.Console.Out.WriteLine(
                     "Device {0}: {1}({2})",
                     e.Data.DeviceNumber,
                     e.Data.Command,
                     e.Data.Data);
             }
             </code>
             </example>
             <remarks>
             <para>
             Be careful when handling this event, because it is usually raised 
             from a background thread. The simplest way to deal with that is not
             to register for this event at all. Use a <see cref="T:Zaber.Conversation"/>
             to coordinate requests and responses instead. It handles all the
             threading issues and just returns the response as the return
             value from <see cref="M:Zaber.Conversation.Request(Zaber.Command,System.Int32)"/>.
             </para>
             <para>If you do want to handle this event safely in your user 
             interface, read the first two sections of this article:
             http://weblogs.asp.net/justin_rogers/articles/126345.aspx
             It shows how to use <c>Control.InvokeRequired</c> and 
             <c>Control.BeginInvoke</c> to move execution back onto the UI
             thread from a background thread.
             </para>
             </remarks>
        </member>
        <member name="E:Zaber.TSeriesPort.DataPacketSent">
            <summary>
            Raised when the port sends data to the devices. 
            </summary>
            <remarks>
            Be careful when handling this event, because it is occasionally 
            raised from a background thread. See 
            <see cref="E:Zaber.TSeriesPort.DataPacketReceived"/> for details. Some scenarios where
            it can be raised from a background thread are: executing scripts 
            and automatically adjusting message id mode.
            </remarks>
        </member>
        <member name="E:Zaber.TSeriesPort.ErrorReceived">
            <summary>
            Raised when the underlying port raises its own <c>ErrorReceived</c> 
            event, or when a partial data packet is received because some bytes
            have been dropped. The type of error is described by
            <see cref="P:Zaber.ZaberPortErrorReceivedEventArgs.ErrorType"/>.
            </summary>
            <remarks>
            Be careful when handling this event, because it is usually raised 
            from a background thread. See <see cref="E:Zaber.TSeriesPort.DataPacketReceived"/> for 
            details.
            </remarks>
        </member>
        <member name="P:Zaber.TSeriesPort.PortName">
            <summary>
            Gets the port name that was last sent to <see cref="M:Zaber.TSeriesPort.Open(System.String)"/>.
            </summary>
            <value>The port name that was last sent to <see cref="M:Zaber.TSeriesPort.Open(System.String)"/>, or
            null if <see cref="M:Zaber.TSeriesPort.Open(System.String)"/> has not been called.</value>
        </member>
        <member name="P:Zaber.TSeriesPort.IsOpen">
            <summary>
            Is the port open?
            </summary>
        </member>
        <member name="P:Zaber.TSeriesPort.DelayMilliseconds">
            <summary>
            Get or set the delay period to use with <see cref="M:Zaber.TSeriesPort.SendDelayed(System.Byte,Zaber.Command,System.Int32)"/>.
            </summary>
        </member>
        <member name="T:Zaber.Command">
            <summary>
            Named constants for the common commands that most T-Series devices 
            will support.
            </summary>
            <remarks>
            <c>Command</c> values and <c>byte</c> values are interchangeable,
            but you do need an explicit cast to convert from one to the other.
            </remarks>
        </member>
        <member name="F:Zaber.Command.Reset">
            <summary>
            Data is ignored.
            </summary>
        </member>
        <member name="F:Zaber.Command.Home">
            <summary>
            Response data is Final Position. 
            </summary>
        </member>
        <member name="F:Zaber.Command.Renumber">
            <summary>
            Request data is New Number. Response data is Device Id. 
            </summary>
        </member>
        <member name="F:Zaber.Command.MoveTracking">
            <summary>
            Response data is Position. 
            </summary>
        </member>
        <member name="F:Zaber.Command.LimitActive">
            <summary>
            Response data is Position. 
            </summary>
        </member>
        <member name="F:Zaber.Command.ManualMoveTracking">
            <summary>
            Response data is Position. 
            </summary>
        </member>
        <member name="F:Zaber.Command.StoreCurrentPosition">
            <summary>
            Request data is Address. Response data is Address. 
            </summary>
        </member>
        <member name="F:Zaber.Command.ReturnStoredPosition">
            <summary>
            Request data is Address. Response data is Stored Position. 
            </summary>
        </member>
        <member name="F:Zaber.Command.MoveToStoredPosition">
            <summary>
            Request data is Address. Response data is Final Position. 
            </summary>
        </member>
        <member name="F:Zaber.Command.MoveAbsolute">
            <summary>
            Request data is Absolute Position. Response data is Final position. 
            </summary>
        </member>
        <member name="F:Zaber.Command.MoveRelative">
            <summary>
            Request data is Relative Position. Response data is Final Position. 
            </summary>
        </member>
        <member name="F:Zaber.Command.MoveAtConstantSpeed">
            <summary>
            Request data is Speed. Response data is Speed. 
            </summary>
        </member>
        <member name="F:Zaber.Command.Stop">
            <summary>
            Response data is Final Position. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetActiveAxis">
            <summary>
            Request data is Axis. Response data is Axis. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetAxisDeviceNumber">
            <summary>
            Request data is Device Number. Response data is Device Number. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetAxisInversion">
            <summary>
            Request data is Invert Status. Response data is Invert Status. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetAxisVelocityProfile">
            <summary>
            Request data is Profile Number. Response data is Profile Number. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetAxisVelocityScale">
            <summary>
            Request data is Maximum Velocity. Response data is Maximum Velocity. 
            </summary>
        </member>
        <member name="F:Zaber.Command.LoadEventInstruction">
            <summary>
            Request data is Key Event. Response data is Key Event. 
            </summary>
        </member>
        <member name="F:Zaber.Command.ReturnEventInstruction">
            <summary>
            Request data is Key Event. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetCalibrationMode">
            <summary>
            Request data is Calibration Mode. Response data is Calibration Mode. 
            </summary>
        </member>
        <member name="F:Zaber.Command.ReadOrWriteMemory">
            <summary>
            Request data is Data. Response data is Data. 
            </summary>
        </member>
        <member name="F:Zaber.Command.RestoreSettings">
            <summary>
            Request data is Peripheral Id. Response data is Peripheral Id. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetMicrostepResolution">
            <summary>
            Request data is Microsteps. Response data is Microsteps. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetRunningCurrent">
            <summary>
            Request data is Value. Response data is Value. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetHoldCurrent">
            <summary>
            Request data is Value. Response data is Value. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetDeviceMode">
            <summary>
            Request data is Mode. Response data is Mode. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetHomeSpeed">
            <summary>
            Request data is Speed. Response data is Speed. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetTargetSpeed">
            <summary>
            Request data is Speed. Response data is Speed. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetAcceleration">
            <summary>
            Request data is Acceleration. Response data is Acceleration. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetMaximumRange">
            <summary>
            Request data is Range. Response data is Range. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetCurrentPosition">
            <summary>
            Request data is New Position. Response data is New Position. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetMaximumRelativeMove">
            <summary>
            Request data is Range. Response data is Range. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetHomeOffset">
            <summary>
            Request data is Offset. Response data is Offset. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetAliasNumber">
            <summary>
            Request data is Alias Number. Response data is Alias Number. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetLockState">
            <summary>
            Request data is Lock State. Response data is Lock State. 
            </summary>
        </member>
        <member name="F:Zaber.Command.ReturnDeviceId">
            <summary>
            Response data is Device Id. 
            </summary>
        </member>
        <member name="F:Zaber.Command.ReturnFirmwareVersion">
            <summary>
            Response data is Version. 
            </summary>
        </member>
        <member name="F:Zaber.Command.ReturnPowerSupplyVoltage">
            <summary>
            Response data is Voltage. 
            </summary>
        </member>
        <member name="F:Zaber.Command.ReturnSetting">
            <summary>
            Request data is Setting Number. Response data is Setting Value. 
            </summary>
        </member>
        <member name="F:Zaber.Command.ReturnStatus">
            <summary>
            Response data is Status. 
            </summary>
        </member>
        <member name="F:Zaber.Command.EchoData">
            <summary>
            Request data is Data. Response data is Data. 
            </summary>
        </member>
        <member name="F:Zaber.Command.Error">
            <summary>
            Response data is Error Code. 
            </summary>
        </member>
        <member name="T:Zaber.ConversationCollection">
            <summary>
            Treats a collection of conversations as a single conversation. Useful 
            for making requests from aliases (including the "all devices" alias on 
            device number 0). When you make a request, it waits for a response from
            every conversation in the collection before it returns.
            </summary>
        </member>
        <member name="T:Zaber.Conversation">
            <summary>
            Converts from the asynchronous, event-driven model of the 
            <see cref="T:Zaber.ZaberDevice"/> to a synchronous, request/response model.
            </summary>
            <remarks>
            When you call the <see cref="M:Zaber.Conversation.Request(Zaber.Command,System.Int32)"/> method, the conversation will
            call <see cref="M:Zaber.ZaberDevice.Send(Zaber.Command,System.Int32,System.Byte)"/> on its device, and then sleep until
            a response is returned. See the <see cref="M:Zaber.Conversation.Request(Zaber.Command,System.Int32)"/> method notes for 
            details on support for message ids and pitfalls to avoid.
            </remarks>
        </member>
        <member name="M:Zaber.Conversation.#ctor(Zaber.ZaberDevice)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="device">See <see cref="P:Zaber.Conversation.Device"/></param>
        </member>
        <member name="M:Zaber.Conversation.Request(Zaber.Command)">
            <summary>
            Send a request to a Zaber device that doesn't require a data value.
            </summary>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
            <returns>The response message</returns>
            <exception cref="T:Zaber.RequestReplacedException">
            Another request has replaced this request.
            </exception>
            <exception cref="T:Zaber.ErrorResponseException">
            The response was <see cref="F:Zaber.Command.Error"/>.
            </exception>
            <exception cref="T:Zaber.ZaberPortErrorException">
            A port error occurred while waiting for a response.
            </exception>
            <exception cref="T:Zaber.RequestTimeoutException">The request did not
            complete before the timeout expired.</exception>
            <remarks>
            See more details in the other override of <see cref="M:Zaber.Conversation.Request(Zaber.Command,System.Int32)"/>.
            </remarks>
        </member>
        <member name="M:Zaber.Conversation.Request(Zaber.Command,System.Int32)">
            <summary>
            Send a request to a Zaber device and wait for the response.
            </summary>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
            <param name="data">See <see cref="P:Zaber.DataPacket.Data"/>.</param>
            <returns>The response message</returns>
            <exception cref="T:Zaber.RequestReplacedException">
            Another request has replaced this request.
            </exception>
            <exception cref="T:Zaber.ErrorResponseException">
            The response was <see cref="F:Zaber.Command.Error"/>.
            </exception>
            <exception cref="T:Zaber.ZaberPortErrorException">
            A port error occurred while waiting for a response.
            </exception>
            <exception cref="T:Zaber.RequestTimeoutException">The request did not
            complete before the timeout expired.</exception>
            <remarks>
            <para>This method sends the request on to the device and then
            puts the thread to sleep until a response is received or the
            <see cref="P:Zaber.Conversation.TimeoutTimer"/> times out. However,
            there are some situations where it can get confused about
            which response goes with which request.</para>
            <para>If message ids are enabled on the device, then coordinating
            requests and responses is reliable. There were some bugs in the 
            firmware related
            to message ids, so make sure your firmware is at least
            version 5.07.</para>
            <para>If message ids are disabled (the default), then the following
            scenarios can cause errors:
            <list type="bullet">
            <item>You request a pre-emptable command from the conversation, and
            while it is running, a joystick sends a command to the same device.
            The conversation didn't see the request, so it assumes that the
            response is for the message it sent and returns it normally.</item>
            <item>You request a command from the conversation, and just as it
            starts, another thread requests another command. Depending on the
            timing, the conversation may not record the requests in the same
            order they get sent to the device, and the conversation may return 
            your command's response to the other thread and the other command's 
            response to you.</item>
            <item>You request a command from the conversation, and just as
            it finishes, another thread requests another command. Depending
            on the timing, the conversation may return your command's response
            to the other thread and the other command's response to you.</item>
            </list></para>
            </remarks>
        </member>
        <member name="M:Zaber.Conversation.PrepareForRetry(Zaber.Command,System.Int32,Zaber.ConversationTopic)">
            <summary>
            Record the request that started a topic so it can be retried if 
            necessary.
            </summary>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
            <param name="data">See <see cref="P:Zaber.DataPacket.Data"/>.</param>
            <param name="topic">The topic to record this request on. It should
            have been returned by StartTopic.</param>
        </member>
        <member name="M:Zaber.Conversation.StartTopic">
            <summary>
            Record that a request is about to be made.
            </summary>
            <returns>The topic that will monitor the request.</returns>
            <remarks>
            <para>
            You can then make the request using the device directly and call 
            <see cref="M:Zaber.ConversationTopic.Wait"/> to wait for the response. This is
            useful if you want to make several unrelated requests of several devices
            and then wait until they are all completed. If message ids are enabled,
            be sure to use the message id from the topic when sending the request.
            </para>
            <para>
            If message ids are disabled, then this technique is not thread-safe,
            because there's no guarantee that two requests from two threads will get 
            sent to the device in the same order that their topics were started.
            If you're sending requests to one device from more than one thread,
            either enable message ids, or implement your own locking at a higher level.
            </para>
            </remarks>
        </member>
        <member name="M:Zaber.Conversation.StartTopic(System.Byte)">
            <summary>
            Record that a request is about to be made.
            </summary>
            <returns>The topic that will monitor the request.</returns>
            <param name="messageId">The message id that the request will use.</param>
            <remarks>
            <para>
            You can then make the request using the device directly and call 
            <see cref="M:Zaber.ConversationTopic.Wait"/> to wait for the response. This is
            useful if you want to make several unrelated requests of several devices
            and then wait until they are all completed. If message ids are disabled,
            messageId will be ignored.
            </para>
            <para>
            If message ids are disabled, then this technique is not thread-safe,
            because there's no guarantee that two requests from two threads will get 
            sent to the device in the same order that their topics were started.
            If you're sending requests to one device from more than one thread,
            either enable message ids, or implement your own locking at a higher level.
            </para>
            </remarks>
        </member>
        <member name="M:Zaber.Conversation.CalculateMessageId">
            <summary>
            Calculates the next message id.
            </summary>
            <returns>The message id.</returns>
        </member>
        <member name="M:Zaber.Conversation.OnTopicNotFound">
            <summary>
            Handle the event when a response comes in that doesn't correspond
            to any known topic. This is only called when 
            <see cref="P:Zaber.Conversation.AreUnexpectedResponsesInvalid"/> is true.
            </summary>
        </member>
        <member name="M:Zaber.Conversation.CheckReplacement(Zaber.ConversationTopic,Zaber.DeviceMessage)">
            <summary>
            Checks if the current response replaces pre-empted commands.
            </summary>
            <param name="topic"></param>
            <param name="response"></param>
        </member>
        <member name="P:Zaber.Conversation.Device">
            <summary>
            The device that this conversation will send requests through.
            </summary>
        </member>
        <member name="P:Zaber.Conversation.RetryCount">
            <summary>
            Gets or sets the number of times to retry a request after a port error.
            Defaults to 0.
            </summary>
            <remarks>
            By default, when the port raises its 
            <see cref="E:Zaber.IZaberPort.ErrorReceived"/> event, any waiting 
            conversation topics throw a <see cref="T:Zaber.ZaberPortErrorException"/>.
            However, you can set this property to make the conversation retry
            the request a few times before throwing the exception. Only commands
            that are safe will be retried. For example, Move Relative cannot
            be retried, it will always throw an exception if a port error 
            occurs.
            </remarks>
        </member>
        <member name="P:Zaber.Conversation.AreUnexpectedResponsesInvalid">
            <summary>
            Gets or sets a flag for whether unexpected responses should be
            reported as invalid.
            </summary>
            <exception cref="T:System.InvalidOperationException">when this conversation's
            device does not have message ids enabled</exception>
            <remarks>If this flag is true, then only responses with a known
            message id will be processed. Any responses with an unknown message
            id or no message id will trigger 
            <see cref="F:Zaber.ZaberPortError.InvalidPacket"/>. The advantage to 
            setting this is that corrupted responses won't accidentally trigger 
            a <see cref="T:Zaber.RequestReplacedException"/>. If you do set this,
            you should probably use the <see cref="P:Zaber.Conversation.Timeout"/> property
            to avoid having a thread that hangs forever.</remarks>
            <seealso cref="P:Zaber.Conversation.RetryCount"/>
        </member>
        <member name="P:Zaber.Conversation.IsWaiting">
            <summary>
            This is really only used for testing purposes to make sure that no
            requests are left over in any of the internal data structures.
            </summary>
        </member>
        <member name="P:Zaber.Conversation.Timeout">
            <summary>
            Gets or sets the length of time in milliseconds to wait for a response to
            any request. Use System.Threading.Timeout.Infinite (-1) to wait forever.
            Defaults to infinite.
            </summary>
        </member>
        <member name="P:Zaber.Conversation.TimeoutTimer">
            <summary>
            Used to implement the <see cref="P:Zaber.Conversation.Timeout"/>. This is only really useful for
            testing, most clients can just use the <see cref="P:Zaber.Conversation.Timeout"/> property.
            </summary>
        </member>
        <member name="M:Zaber.ConversationCollection.#ctor(Zaber.DeviceCollection)">
            <summary>
            Create a new instance.
            </summary>
            <param name="device">The device that this conversation will send 
            single requests through.</param>
        </member>
        <member name="M:Zaber.ConversationCollection.Request(Zaber.Command,System.Int32)">
            <summary>
            Send a request to a Zaber device collection and wait for the responses
            from all its member devices.
            </summary>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
            <param name="data">See <see cref="P:Zaber.DataPacket.Data"/>.</param>
            <returns>The response message from the first conversation in the
            list.</returns>
            <exception cref="T:Zaber.RequestCollectionException">
            At least one conversation in the list raised an exception. The detailed
            responses and exceptions are available from the exception as a list of
            <see cref="T:Zaber.ConversationTopic"/> objects.
            </exception>
            <exception cref="T:Zaber.RequestTimeoutException">Some of the requests did not
            complete before the timeout expired.</exception>
            <remarks>
            This method sends the request on to this conversation's device and then
            puts the thread to sleep until a response is received from every
            conversation in the list. However,
            there are some situations where it can get confused about
            which response goes with which request. See <see cref="M:Zaber.Conversation.Request(Zaber.Command,System.Int32)"/>
            for details.
            </remarks>
            <seealso cref="M:Zaber.ConversationCollection.RequestCollection(Zaber.Command,System.Int32[])"/>
        </member>
        <member name="M:Zaber.ConversationCollection.StartTopic(System.Byte)">
            <summary>
            Record that a request is about to be made.
            </summary>
            <param name="messageId">The message id that the request will use.</param>
            <returns>The topic that will monitor the request.</returns>
            <remarks>
            <para>
            You can then make the request using the device directly and call 
            <see cref="M:Zaber.ConversationTopic.Wait"/> to wait for the response. This is
            useful if you want to make several unrelated requests of several devices
            and then wait until they are all completed. If message ids are enabled,
            be sure to use the message id from the topic when sending the request.
            </para>
            <para>
            If message ids are disabled, then this technique is not thread-safe,
            because there's no guarantee that two requests from two threads will get 
            sent to the device in the same order that their topics were started.
            If you're sending requests to one device from more than one thread,
            either enable message ids, or implement your own locking at a higher level.
            </para>
            </remarks>
        </member>
        <member name="M:Zaber.ConversationCollection.StartTopicCollection">
            <summary>
            Record that a request is about to be made to several devices.
            </summary>
            <returns>The topic that will monitor the request.</returns>
            <remarks>
            <para>
            You can then make the request using the devices directly and call 
            <see cref="M:Zaber.ConversationTopic.Wait"/> to wait for the response. This is
            useful if you want to make several unrelated requests of several devices
            and then wait until they are all completed. If message ids are enabled,
            be sure to use the message id from the topic when sending the request.
            </para>
            <para>
            If message ids are disabled, then this technique is not thread-safe,
            because there's no guarantee that two requests from two threads will get 
            sent to the device in the same order that their topics were started.
            If you're sending requests to one device from more than one thread,
            either enable message ids, or implement your own locking at a higher level.
            </para>
            </remarks>
        </member>
        <member name="M:Zaber.ConversationCollection.StartTopicCollection(System.Byte)">
            <summary>
            Record that a request is about to be made to several devices.
            </summary>
            <param name="messageId">The message id that the request will use.</param>
            <returns>The topic that will monitor the request.</returns>
            <remarks>
            <para>
            You can then make the request using the devices directly and call 
            <see cref="M:Zaber.ConversationTopic.Wait"/> to wait for the response. This is
            useful if you want to make several unrelated requests of several devices
            and then wait until they are all completed. If message ids are enabled,
            be sure to use the message id from the topic when sending the request.
            </para>
            <para>
            If message ids are disabled, then this technique is not thread-safe,
            because there's no guarantee that two requests from two threads will get 
            sent to the device in the same order that their topics were started.
            If you're sending requests to one device from more than one thread,
            either enable message ids, or implement your own locking at a higher level.
            </para>
            </remarks>
        </member>
        <member name="M:Zaber.ConversationCollection.OnTopicNotFound">
            <summary>
            Handle the event when a response comes in that doesn't correspond
            to any known topic. This is only called when 
            <see cref="P:Zaber.ConversationCollection.AreUnexpectedResponsesInvalid"/> is true.
            </summary>
        </member>
        <member name="M:Zaber.ConversationCollection.RequestCollection(Zaber.Command,System.Int32[])">
            <summary>
            Send a request to several conversations and coordinate all the responses.
            </summary>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
            <param name="data">An array of data values. One will be sent to each
            conversation in the list. There are two special cases: one entry and no entries.
            An array with one entry will be used to send a single request to this 
            conversation's device and then the thread will block until a response 
            is received from every conversation in the list. An array with no entries
            is the same as one entry with value 0. See <see cref="P:Zaber.DataPacket.Data"/>.</param>
            <returns>A list of response messages in the same order that the
            conversations appear in the list.</returns>
            <exception cref="T:Zaber.RequestCollectionException">
            At least one request in the list raised an exception. The detailed
            responses and exceptions are available from the exception as a list of
            <see cref="T:Zaber.ConversationTopic"/> objects.
            </exception>
            <exception cref="T:Zaber.RequestTimeoutException">Some of the requests did not
            complete before the timeout expired.</exception>
            <remarks>
            This method sends the request on to the device and then
            puts the thread to sleep until a response is received from every
            device in the collection. However,
            there are some situations where it can get confused about
            which response goes with which request. See 
            <see cref="M:Zaber.Conversation.Request(Zaber.Command,System.Int32)"/>
            for details.
            </remarks>
            <seealso cref="M:Zaber.ConversationCollection.Request(Zaber.Command,System.Int32)"/>
        </member>
        <member name="M:Zaber.ConversationCollection.Sort">
            <summary>
            Sorts the items in the list by their device numbers ascending.
            </summary>
        </member>
        <member name="M:Zaber.ConversationCollection.IndexOf(Zaber.Conversation)">
            <summary>
                Searches for the specified conversation and returns the zero-based index of the
                first occurrence within the entire list.
            </summary>
            <param name="item">The conversation to locate in the list. The value
                can be null.</param>
            <returns>The zero-based index of the first occurrence of item within the entire 
            list, if found; otherwise, –1.</returns>
        </member>
        <member name="M:Zaber.ConversationCollection.Insert(System.Int32,Zaber.Conversation)">
            <summary>
                Inserts an element into the list at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be null.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.  
            -or- index is greater than <see cref="P:Zaber.ConversationCollection.Count"/>.</exception>
        </member>
        <member name="M:Zaber.ConversationCollection.RemoveAt(System.Int32)">
            <summary>
                Removes the element at the specified index of the list.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.  
            -or- index is equal to or greater than <see cref="P:Zaber.ConversationCollection.Count"/>.</exception>
        </member>
        <member name="M:Zaber.ConversationCollection.Add(Zaber.Conversation)">
            <summary>
            Adds a conversation to the collection.
            </summary>
            <param name="item">The conversation to add to the collection</param>
        </member>
        <member name="M:Zaber.ConversationCollection.Clear">
            <summary>
            Removes all conversations from the collection.
            </summary>
        </member>
        <member name="M:Zaber.ConversationCollection.Contains(Zaber.Conversation)">
            <summary>
            Determines whether the collection contains a specific conversation.
            </summary>
            <param name="item">The conversation to locate in the collection</param>
            <returns>true if the conversation is found in the collection, otherwise false.</returns>
        </member>
        <member name="M:Zaber.ConversationCollection.CopyTo(Zaber.Conversation[],System.Int32)">
             <summary>
             Copies the conversations in the collection to a
                 System.Array, starting at a particular System.Array index.
             </summary>
             <param name="array">The one-dimensional System.Array that is the destination of the
                 conversations copied from the collection. The System.Array must
                 have zero-based indexing.
            </param>
             <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
             <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
             <exception cref="T:System.ArgumentNullException">array is null.</exception>
             <exception cref="T:System.ArgumentException">arrayIndex is equal 
             to or greater than the
                 length of array.-or-The number of elements in the source collection
                 is greater than the available space from arrayIndex to the end of the destination
                 array.</exception>
        </member>
        <member name="M:Zaber.ConversationCollection.Remove(Zaber.Conversation)">
            <summary>
            Removes the first occurrence of a specific conversation from the collection.
            </summary>
            <param name="item">The conversation to remove from the collection.</param>
            <returns>true if the conversation was successfully removed from the collection,
                otherwise false. This method also returns false if the conversation is not found in
                the collection.</returns>
        </member>
        <member name="M:Zaber.ConversationCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>an enumerator that iterates through the collection.</returns>
        </member>
        <member name="M:Zaber.ConversationCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>an enumerator that iterates through the collection.</returns>
        </member>
        <member name="P:Zaber.ConversationCollection.AreUnexpectedResponsesInvalid">
            <summary>
            Gets or sets a flag for whether unexpected responses should be
            reported as invalid.
            </summary>
            <exception cref="T:System.InvalidOperationException">when this conversation's
            device does not have message ids enabled</exception>
            <remarks>If this flag is true, then only responses with a known
            message id will be processed. Any responses with an unknown message
            id or no message id will trigger 
            <see cref="F:Zaber.ZaberPortError.InvalidPacket"/>. The advantage to 
            setting this is that corrupted responses won't accidentally trigger 
            a <see cref="T:Zaber.RequestReplacedException"/>. If you do set this,
            you should probably use the <see cref="T:System.Threading.Timeout"/> property
            to avoid having a thread that hangs forever. Setting this on
            a conversation collection will set it on all members of the
            collection.</remarks>
            <seealso cref="P:Zaber.ConversationCollection.RetryCount"/>
        </member>
        <member name="P:Zaber.ConversationCollection.RetryCount">
            <summary>
            Gets or sets the number of times to retry a request after a port error.
            Defaults to 0.
            </summary>
            <remarks>
            By default, when the port raises its 
            <see cref="E:Zaber.IZaberPort.ErrorReceived"/> event, any waiting 
            conversation topics throw a <see cref="T:Zaber.ZaberPortErrorException"/>.
            However, you can set this property to make the conversation retry
            the request a few times before throwing the exception. Only commands
            that are safe will be retried. For example, Move Relative cannot
            be retried, it will always throw an exception if a port error 
            occurs. Setting this on a conversation collection will set it
            on all members of the collection.
            </remarks>
        </member>
        <member name="P:Zaber.ConversationCollection.IsWaiting">
            <summary>
            This is really only used for testing purposes to make sure that no
            requests are left over in any of the internal data structures.
            </summary>
        </member>
        <member name="P:Zaber.ConversationCollection.Item(System.Int32)">
            <summary>
                Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.  
            -or- index is equal to or greater than <see cref="P:Zaber.ConversationCollection.Count"/>.</exception>
        </member>
        <member name="P:Zaber.ConversationCollection.Count">
            <summary>
            Gets the number of conversations contained in the collection.
            </summary>
        </member>
        <member name="P:Zaber.ConversationCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="T:Zaber.DeviceType">
            <summary>
            Describes the type of a <see cref="T:Zaber.ZaberDevice"/>.
            </summary>
            <remarks>The device type determines the list of supported commands.</remarks>
        </member>
        <member name="M:Zaber.DeviceType.#ctor(Zaber.DeviceType)">
            <summary>
            Copy constructor
            </summary>
            <param name="source">copy details from this device type</param>
        </member>
        <member name="M:Zaber.DeviceType.ToString">
            <summary>
            Returns the <see cref="P:Zaber.DeviceType.Name"/> or the <see cref="P:Zaber.DeviceType.DeviceId"/>.
            </summary>
            <returns>A descriptive string that can be displayed to a user.</returns>
        </member>
        <member name="M:Zaber.DeviceType.GetCommandByNumber(Zaber.Command)">
            <summary>
            Look up command details from the list of supported commands.
            </summary>
            <param name="command">The command number to look up</param>
            <returns>The command details, or null if the command is not
            supported by this device type.</returns>
        </member>
        <member name="P:Zaber.DeviceType.Name">
            <summary>
            A custom name to display to the user.
            </summary>
            <seealso cref="M:Zaber.DeviceType.ToString"/>
        </member>
        <member name="P:Zaber.DeviceType.Commands">
            <summary>
            A list of the commands that this device type supports.
            </summary>
        </member>
        <member name="P:Zaber.DeviceType.DeviceId">
            <summary>
            The identifier for this device type.
            </summary>
        </member>
        <member name="T:Zaber.ResponseInfo">
            <summary>
            Descriptive information about a command that Zaber devices support.
            </summary>
            <remarks>This class is specific to response-only commands.</remarks>
        </member>
        <member name="T:Zaber.CommandInfo">
            <summary>
            Descriptive information about a command that Zaber devices support.
            </summary>
        </member>
        <member name="P:Zaber.CommandInfo.IsSetting">
            <summary>
            Is this command actually a setting that can also be retrieved?
            </summary>
            <remarks>
            A setting's value is set by sending the command with the new
            value as the data. A setting's value is read by sending the
            <see cref="F:Zaber.Command.ReturnSetting"/> command with the setting's
            command number as the data.
            </remarks>
        </member>
        <member name="P:Zaber.CommandInfo.IsReadOnlySetting">
            <summary>
            Is this command actually a read-only setting?
            </summary>
            <remarks>
            Read-only settings are read differently from other settings. Just
            send the command and the value will be returned.
            </remarks>
        </member>
        <member name="P:Zaber.CommandInfo.IsResponseOnly">
            <summary>
            Response-only commands are never sent to the devices. They come back as
            responses. The error response is a good example.
            </summary>
        </member>
        <member name="P:Zaber.CommandInfo.IsRetrySafe">
            <summary>
            Gets or sets a flag showing whether it is safe to send the command 
            again when a response is lost.
            </summary>
        </member>
        <member name="P:Zaber.CommandInfo.HelpText">
            <summary>
            General descriptive text about the command.
            </summary>
            <remarks>
            When you set this property, it will be reformatted. Line breaks and
            whitespace are removed, except for blank lines.
            </remarks>
        </member>
        <member name="P:Zaber.CommandInfo.IsCurrentPositionReturned">
            <summary>
            Gets or sets a flag showing whether the response to this command
            contains the device's current position.
            </summary>
        </member>
        <member name="P:Zaber.CommandInfo.ResponseDescription">
            <summary>
            Describes the meaning of the data value in a response packet.
            </summary>
        </member>
        <member name="P:Zaber.CommandInfo.DataDescription">
            <summary>
            Describes the data value of this command.
            </summary>
            <value>
            Null if the data command is ignored.
            </value>
        </member>
        <member name="P:Zaber.CommandInfo.Name">
            <summary>
            A brief name for the command
            </summary>
        </member>
        <member name="P:Zaber.CommandInfo.Command">
            <summary>
            The enumeration entry from <see cref="T:Zaber.Command"/> 
            that represents this command.
            </summary>
        </member>
        <member name="P:Zaber.CommandInfo.Number">
            <summary>
            The code number that represents this command.
            </summary>
        </member>
        <member name="P:Zaber.ResponseInfo.IsResponseOnly">
            <summary>
            Response-only commands are never sent to the devices. They come back as
            responses. The error response is a good example.
            </summary>
        </member>
        <member name="T:Zaber.ZaberError">
            <summary>
            Named constants for the error codes that Zaber devices will return.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.None">
            <summary>
            No error has occurred.
            </summary>
            <remarks>
            This should never be returned by a device. It's only useful as a 
            default value in code.
            </remarks>
        </member>
        <member name="F:Zaber.ZaberError.CannotHome">
            <summary>
            Home - Device has traveled a long distance without triggering the home sensor. Device may be stalling or slipping.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.DeviceNumberInvalid">
            <summary>
            Renumbering data out of range. Data (Device number) must be between 1 and 254 inclusive.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.VoltageLow">
            <summary>
            Power supply voltage too low.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.VoltageHigh">
            <summary>
            Power supply voltage too high.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.StoredPositionInvalid">
            <summary>
            The position stored in the requested register is no longer valid. This is probably because the maximum range was reduced.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.AbsolutePositionInvalid">
            <summary>
            Move Absolute - Target position out of range.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.RelativePositionInvalid">
            <summary>
            Move Relative - Target position out of range.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.VelocityInvalid">
            <summary>
            Constant velocity move. Velocity out of range.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.AxisInvalid">
            <summary>
            Set Active Axis - Data out of range. Must be 1, 2, or 3.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.AxisDeviceNumberInvalid">
            <summary>
            Set Axis Device Number - Data out of range. Must be between 0 and 254 inclusive.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.InversionInvalid">
            <summary>
            Set Axis Inversion - Data out of range. Must be 0, 1, or -1.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.VelocityProfileInvalid">
            <summary>
            Set Axis Velocity Profile - Data out of range. Must be 0, 1, 2, or 3.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.VelocityScaleInvalid">
            <summary>
            Set Axis Velocity Scale - Data out of range. Must be between 0 and 65535.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.LoadEventInvalid">
            <summary>
            Load Event-Triggered Instruction - Data out of range. See command #30 for valid range.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.ReturnEventInvalid">
            <summary>
            Return Event-Triggered Instruction - Data out of range. See command #31 and #30 for valid range.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.CalibrationModeInvalid">
            <summary>
            Must be 0, 1, or 2.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.PeripheralIdInvalid">
            <summary>
            Restore Settings - peripheral id is invalid. Please use one of the peripheral ids listed in the user manual, or 0 for default.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.ResolutionInvalid">
            <summary>
            Invalid microstep resolution. Resolution may only be 1, 2, 4, 8, 16, 32, 64, 128.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.RunCurrentInvalid">
            <summary>
            Run current out of range. See command 38 for allowable values.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.HoldCurrentInvalid">
            <summary>
            Hold current out of range. See command 39 for allowable values.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.ModeInvalid">
            <summary>
            Set Device Mode - one or more of the mode bits is invalid.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.HomeSpeedInvalid">
            <summary>
            Home speed out of range. The range of home speed is determined by the resolution.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.SpeedInvalid">
            <summary>
            Target speed out of range. The range of target speed is determined by the resolution.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.AccelerationInvalid">
            <summary>
            Target acceleration out of range. The range of target acceleration is determined by the resolution.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.MaximumRangeInvalid">
            <summary>
            The maximum range may only be set between 1 and the resolution limit of the stepper controller, which is 16,777,215.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.CurrentPositionInvalid">
            <summary>
            Current position out of range. Current position must be between 0 and the maximum range.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.MaximumRelativeMoveInvalid">
            <summary>
            Max relative move out of range. Must be between 0 and 16,777,215.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.OffsetInvalid">
            <summary>
            Home offset out of range. Home offset must be between 0 and maximum range.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.AliasInvalid">
            <summary>
            Alias out of range. Alias must be between 0 and 254 inclusive.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.LockStateInvalid">
            <summary>
            Lock state must be 1 (locked) or 0 (unlocked).
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.DeviceIdUnknown">
            <summary>
            The device id is not included in the firmware's list.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.SettingInvalid">
            <summary>
            Return Setting - data entered is not a valid setting command number. Valid setting command numbers are the command numbers of any "Set ..." instructions.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.CommandInvalid">
            <summary>
            Command number not valid in this firmware version.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.Busy">
            <summary>
            Another command is executing and cannot be pre-empted. Either stop the previous command or wait until it finishes before trying again.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.SavePositionInvalid">
            <summary>
            Save Current Position register out of range (must be 0-15).
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.SavePositionNotHomed">
            <summary>
            Save Current Position is not allowed unless the device has been homed.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.ReturnPositionInvalid">
            <summary>
            Return Stored Position register out of range (must be 0-15).
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.MovePositionInvalid">
            <summary>
            Move to Stored Position register out of range (must be 0-15).
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.MovePositionNotHomed">
            <summary>
            Move to Stored Position is not allowed unless the device has been homed.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.RelativePositionLimited">
            <summary>
            Move Relative (command 20) exceeded maximum relative move range. Either move a shorter distance, or change the maximum relative move (command 46).
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.SettingsLocked">
            <summary>
            Must clear Lock State (command 49) first. See the Set Lock State command for details.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.DisableAutoHomeInvalid">
            <summary>
            Set Device Mode - this is a linear actuator; Disable Auto Home is used for rotary actuators only.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.Bit10Invalid">
            <summary>
            Set Device Mode - bit 10 is reserved and must be 0.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.HomeSwitchInvalid">
            <summary>
            Set Device Mode - this device has integrated home sensor with preset polarity; mode bit 12 cannot be changed by the user.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.Bit13Invalid">
            <summary>
            Set Device Mode - bit 13 is reserved and must be 0.
            </summary>
        </member>
        <member name="T:Zaber.TimeoutTimer">
            <summary>
            This class is simply a wrapper around standard timing utilities.
            </summary>
            <remarks>
            This class allows
            you to write unit tests that replace the TimeoutTimer with a MockTimeoutTimer
            and then the unit test can make the timer time out on demand. You should
            copy the TimeoutTimer to your application and the MockTimeoutTimer to your
            test application.
            </remarks>
        </member>
        <member name="M:Zaber.TimeoutTimer.Sleep">
            <summary>
            Sleep for the configured length of time. 
            </summary>
            <remarks>
            This is equivalent to
            Thread.Sleep(Timeout), but it allows you to write unit tests that make
            the timer sleep until the unit test tells it to wake up.
            </remarks>
        </member>
        <member name="M:Zaber.TimeoutTimer.WaitOne(System.Threading.WaitHandle)">
            <summary>
            Blocks the current thread until the WaitHandle receives a signal or the
            timer times out.
            </summary>
            <param name="waitHandle">The wait handle to block on.</param>
            <returns>true if the wait handle receives a signal; otherwise false.</returns>
            <remarks>
            This is equivalent to WaitHandle.WaitOne(Timeout), but it allows you
            to write unit tests that make the timer wait until the unit test
            tells it to time out.
            </remarks>
        </member>
        <member name="P:Zaber.TimeoutTimer.Timeout">
            <summary>
            The length of time in milliseconds before a timeout occurs, or
            or Timeout.Infinite (-1) to wait indefinitely.
            </summary>
        </member>
        <member name="T:Zaber.SettingInfo">
            <summary>
            Descriptive information about a setting that Zaber devices support.
            </summary>
            <remarks>This class is specific to commands that read or adjust a 
            device setting.</remarks>
        </member>
        <member name="P:Zaber.SettingInfo.IsSetting">
            <summary>
            Is this command actually a setting that can also be retrieved?
            </summary>
            <remarks>
            A setting's value is set by sending the command with the new
            value as the data. A setting's value is read by sending the
            <see cref="F:Zaber.Command.ReturnSetting"/> command with the setting's
            command number as the data.
            </remarks>
        </member>
        <member name="T:Zaber.PlugIns.ScriptLanguage">
            <summary>
            Represents a language compiler that can be used for scripting.
            </summary>
        </member>
        <member name="M:Zaber.PlugIns.ScriptLanguage.#ctor(System.CodeDom.Compiler.CompilerInfo)">
            <summary>
            Create a new instance.
            </summary>
            <param name="compilerInfo">The compiler that this language 
            represents.</param>
        </member>
        <member name="M:Zaber.PlugIns.ScriptLanguage.FindAll">
            <summary>
            Find all languages installed on this computer.
            </summary>
            <returns>A collection of <see cref="T:Zaber.PlugIns.ScriptLanguage"/> objects.</returns>
        </member>
        <member name="M:Zaber.PlugIns.ScriptLanguage.FindByExtension(System.IO.FileInfo)">
            <summary>
            Find the scripting language that compiles a given file type.
            </summary>
            <param name="file">The file whose extension will be used.</param>
            <returns>The scripting language that compiles the file type.</returns>
        </member>
        <member name="M:Zaber.PlugIns.ScriptLanguage.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">The System.Object to compare with the current System.Object.</param>
            <returns>true if the specified System.Object is equal to the current System.Object;
            otherwise, false.</returns>
            <remarks>Just compares whether the two ScriptLanguages use the 
            same compiler info.</remarks>
        </member>
        <member name="M:Zaber.PlugIns.ScriptLanguage.GetHashCode">
            <summary>
            Serves as a hash function for the ScriptLanguage.
            </summary>
            <returns>A hash code for the ScriptLanguage.</returns>
            <remarks>Just returns the compiler info's hash code.</remarks>
        </member>
        <member name="P:Zaber.PlugIns.ScriptLanguage.CompilerInfo">
            <summary>
            The details of the compiler this language represents.
            </summary>
        </member>
        <member name="P:Zaber.PlugIns.ScriptLanguage.Name">
            <summary>
            The name of this language
            </summary>
        </member>
        <member name="P:Zaber.PlugIns.ScriptLanguage.FileFilter">
            <summary>
            A file filter for use with file dialogs.
            </summary>
        </member>
        <member name="P:Zaber.PlugIns.ScriptLanguage.UniqueExtensions">
            <summary>
            Get a list of the file extensions this language supports.
            </summary>
            <returns>A collection of strings. The strings do not start with a 
            period.</returns>
        </member>
        <member name="T:Zaber.PlugIns.IFileFinder">
            <summary>
            Search features for files in a specific folder.
            </summary>
        </member>
        <member name="M:Zaber.PlugIns.IFileFinder.FindDefaultFile(Zaber.PlugIns.ScriptLanguage)">
            <summary>
            Find the default file in the folder.
            </summary>
            <param name="language">Specifies the file extensions you want to
            look for</param>
            <returns>The requested file or null if none could be found.</returns>
            <remarks>First, we find all files with an extension 
            supported by the language parameter. The default is determined using
            the first rule that applies:
            <list type="number">
            <item>If we only find one file, it's the default.</item>
            <item>If one of the files is named Default.*, it's the default.</item>
            <item>The file names are sorted alphabetically, and the first one 
            is the default.</item>
            </list></remarks>
        </member>
        <member name="M:Zaber.PlugIns.IFileFinder.FindFile(System.String)">
            <summary>
            Find the named file in the folder.
            </summary>
            <param name="fileName">The name of the file to find. It may contain wild cards.</param>
            <returns>The requested file, or null if it could not be found</returns>
            <remarks>We search the folder for the named file. If
            more than one file matches the request, the first one is returned.</remarks>
        </member>
        <member name="T:Zaber.DeviceMessage">
            <summary>
            A device message is a <see cref="T:Zaber.DataPacket"/> with some added information.
            </summary>
            <remarks>
            When a <see cref="T:Zaber.ZaberDevice"/> receives a response from the port, it
            adds context details before raising its own event.
            </remarks>
        </member>
        <member name="T:Zaber.DataPacket">
            <summary>
            A collection of all the data that gets sent to and received from the
            T-Series devices.
            </summary>
            <remarks>
            This class is mostly used inside the Zaber library. It converts
            the commands to byte streams and back again. The place that client
            programs will see it is in the <see cref="E:Zaber.TSeriesPort.DataPacketReceived"/>
            event handler.
            </remarks>
            <example>
            Receive a response
            <code>
            void port_DataPacketReceived(object sender, DataPacketReceivedEventArgs e)
            {
                System.Console.Out.WriteLine(
                    "Device {0}: {1}({2})",
                    e.Data.DeviceNumber,
                    e.Data.Command,
                    e.Data.Data);
            }
            </code>
            </example>
        </member>
        <member name="M:Zaber.DataPacket.#ctor">
            <summary>
            Initialize the data structure with all values set to zero.
            </summary>
        </member>
        <member name="M:Zaber.DataPacket.#ctor(Zaber.DataPacket)">
            <summary>
            Copy constructor
            </summary>
            <param name="source">copy details from this packet</param>
        </member>
        <member name="M:Zaber.DataPacket.FormatRequest">
            <summary>
            Format the data packet as a string, assuming that it was sent as a 
            request.
            </summary>
            <returns>The message as a string</returns>
        </member>
        <member name="M:Zaber.DataPacket.FormatResponse">
            <summary>
            Format the message as a string, assuming that it was sent as a 
            response.
            </summary>
            <returns>The message as a string</returns>
        </member>
        <member name="P:Zaber.DataPacket.Data">
            <summary>
            Data value to go with the command
            </summary>
            <value>
            Any integer value, positive or negative. Details depend on the
            different command values. See the user manual.
            </value>
        </member>
        <member name="P:Zaber.DataPacket.Command">
            <summary>
            The specific command to execute. See the user manual for a list of 
            supported commands and the data values they support. Some common
            commands are listed in the <see cref="T:Zaber.Command"/> enumeration.
            </summary>
            <value>
            You can assign any byte value, but you have to cast it to a Command
            type first.
            </value>
            <example>
            Use one of the values from the Command enumeration.
            <code>
            DataPacket data = new DataPacket();
            data.DeviceNumber = 3;
            data.Command = Command.ConstantSpeed;
            data.Data = 100;
            </code>
            </example>
            <example>
            Cast a byte value to a command value.
            <code>
            byte commandFromUser = 43; // Maybe these get read from a form
            int dataFromUser = 100;
            
            DataPacket data = new DataPacket();
            data.DeviceNumber = 3;
            data.Command = (Command)commandFromUser;
            data.Data = dataFromUser;
            </code>
            </example>
        </member>
        <member name="P:Zaber.DataPacket.DeviceNumber">
            <summary>
            The device number in the chain that this command should be sent to 
            or was received from.
            </summary>
            <remarks>
            You can send a command directly to a device, or send a command to 
            an alias device number. 0 is always an alias for all devices, and 
            each device can set another alias number. Several devices can use 
            the same alias, and all of them will respond to a command using
            the alias device number.
            </remarks>
        </member>
        <member name="M:Zaber.DeviceMessage.#ctor(Zaber.DataPacket)">
            <summary>
            Copy constructor that copies a DataPacket.
            </summary>
            <param name="source">copy details from this packet</param>
        </member>
        <member name="M:Zaber.DeviceMessage.FormatRequest">
            <summary>
            Format the message as a string, assuming that it was sent as a 
            request.
            </summary>
            <returns>The message as a string</returns>
        </member>
        <member name="M:Zaber.DeviceMessage.FormatResponse">
            <summary>
            Format the message as a string, assuming that it was sent as a 
            response.
            </summary>
            <returns>The message as a string</returns>
        </member>
        <member name="P:Zaber.DeviceMessage.CommandInfo">
            <summary>
            More details about the command specified in <see cref="T:Zaber.Command"/>.
            </summary>
            <value>
            May be null if the command is not recognized.
            </value>
        </member>
        <member name="P:Zaber.DeviceMessage.MessageId">
            <summary>
            Message Ids allow you to coordinate responses with the requests 
            that triggered them.
            </summary>
            <remarks>
            Messages Ids are also known as logical channels.
            </remarks>
            <value>
            If Message has an Id, it will be between 1 and 254. Otherwise, this
            will be 0.
            </value>
        </member>
        <member name="T:Zaber.ConversationTopic">
            <summary>
            Coordinates a request with a response 
            in the communications with a single device.
            </summary>
        </member>
        <member name="M:Zaber.ConversationTopic.Cancel">
            <summary>
            Stop waiting for a response.
            </summary>
            <remarks>Sets IsCanceled to true and marks the topic complete.</remarks>
        </member>
        <member name="M:Zaber.ConversationTopic.Complete">
            <summary>
            Mark the topic as complete, raise the event, and set the wait handle.
            </summary>
        </member>
        <member name="M:Zaber.ConversationTopic.Wait">
            <summary>
            Blocks the current thread until the topic is completed.
            </summary>
            <returns>This method always returns true.</returns>
            <remarks>
            The topic can be completed by setting any of these properties:
            <see cref="P:Zaber.ConversationTopic.Response"/>, <see cref="P:Zaber.ConversationTopic.ZaberPortError"/>,
            <see cref="P:Zaber.ConversationTopic.ReplacementResponse"/>.
            </remarks>
        </member>
        <member name="M:Zaber.ConversationTopic.Wait(Zaber.TimeoutTimer)">
            <summary>
            Blocks the current thread until the topic is completed or the
            timer times out.
            </summary>
            <param name="timeoutTimer">The timer to wait with.</param>
            <returns>True if the topic completed before the timer expired, 
            otherwise false.</returns>
            <remarks>
            The topic can be completed by setting any of these properties:
            <see cref="P:Zaber.ConversationTopic.Response"/>, <see cref="P:Zaber.ConversationTopic.ZaberPortError"/>,
            <see cref="P:Zaber.ConversationTopic.ReplacementResponse"/>.
            </remarks>
        </member>
        <member name="M:Zaber.ConversationTopic.Validate">
            <summary>
            Validates that the request has been completed successfully.
            </summary>
            <remarks>
            If you want to check whether the response is valid without throwing
            an exception, use <see cref="P:Zaber.ConversationTopic.IsValid"/> instead.
            </remarks>
            <exception cref="T:System.InvalidOperationException">The request has not
            been completed yet.</exception>
            <exception cref="T:Zaber.RequestReplacedException">The request was replaced
            by another request and will not complete.</exception>
            <exception cref="T:Zaber.ZaberPortErrorException">A port error occurred, so
            the status of the request is unknown.</exception>
            <exception cref="T:Zaber.ErrorResponseException">The device responded with
            an error.</exception>
            <exception cref="T:Zaber.RequestCollectionException">Multiple requests were
            made together, and some of them failed.</exception>
        </member>
        <member name="M:Zaber.ConversationTopic.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
                resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Zaber.ConversationTopic.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
                resetting unmanaged resources.
            </summary>
            <param name="isDisposing">True if the object is being disposed, and not
            garbage collected.</param>
        </member>
        <member name="P:Zaber.ConversationTopic.ZaberPortError">
            <summary>
            Gets or sets the port error that was detected while waiting
            for a response.
            </summary>
            <remarks>Setting this completes the topic.</remarks>
        </member>
        <member name="P:Zaber.ConversationTopic.ReplacementResponse">
            <summary>
            Gets or sets the details of a response when this topic's request has
            been replaced by another.
            </summary>
            <remarks>Setting this completes the topic.</remarks>
        </member>
        <member name="P:Zaber.ConversationTopic.RequestCommand">
            <summary>
            Gets or sets the command that was sent to the device.
            </summary>
        </member>
        <member name="P:Zaber.ConversationTopic.RequestData">
            <summary>
            Gets or sets the data value that was sent to the device.
            </summary>
        </member>
        <member name="P:Zaber.ConversationTopic.RetryCount">
            <summary>
            Gets or sets the number of retries remaining.
            </summary>
        </member>
        <member name="P:Zaber.ConversationTopic.Response">
            <summary>
            Gets or sets the details of the response received from the device.
            </summary>
            <remarks>Setting this completes the topic.</remarks>
        </member>
        <member name="P:Zaber.ConversationTopic.RetryPacket">
            <summary>
            Gets or sets a data packet that was used to retry the request after
            a port error.
            </summary>
            <remarks>This is recorded so that the retry can be cancelled if the
            original response is received before the retry request gets sent.
            </remarks>
        </member>
        <member name="P:Zaber.ConversationTopic.IsCanceled">
            <summary>
            Get a flag showing whether this topic was canceled by a call to
            <see cref="M:Zaber.ConversationTopic.Cancel"/>.
            </summary>
        </member>
        <member name="P:Zaber.ConversationTopic.WaitHandle">
            <summary>
            Get a WaitHandle that will be released when the topic is completed.
            </summary>
            <remarks>
            This is useful when you want to use more sophisticated thread coordination.
            You can use this WaitHandle in the WaitHandle class's WaitAll() or WaitAny()
            methods. If you just want to do a simple wait, use the <see cref="M:Zaber.ConversationTopic.Wait"/>
            or <see cref="M:Zaber.ConversationTopic.Wait(Zaber.TimeoutTimer)"/> methods.
            </remarks>
        </member>
        <member name="P:Zaber.ConversationTopic.MessageId">
            <summary>
            Gets or sets the message identifier used to coordinate requests 
            and responses.
            </summary>
        </member>
        <member name="E:Zaber.ConversationTopic.Completed">
            <summary>
            Raised when the topic is completed.
            </summary>
            <remarks>
            The topic can be completed by setting any of these properties:
            <see cref="P:Zaber.ConversationTopic.Response"/>, <see cref="P:Zaber.ConversationTopic.ZaberPortError"/>,
            <see cref="P:Zaber.ConversationTopic.ReplacementResponse"/>.
            </remarks>
        </member>
        <member name="P:Zaber.ConversationTopic.IsComplete">
            <summary>
            Gets a flag showing whether the request has been completed.
            </summary>
        </member>
        <member name="P:Zaber.ConversationTopic.IsValid">
            <summary>
            Gets a flag showing whether the request has been completed successfully.
            </summary>
            <seealso cref="M:Zaber.ConversationTopic.Validate"/>
        </member>
        <member name="T:Zaber.ZaberPortErrorException">
            <summary>
            Exception thrown when a <see cref="T:Zaber.Conversation"/>'s request is 
            interrupted by a <see cref="T:Zaber.ZaberPortError"/>.
            </summary>
        </member>
        <member name="M:Zaber.ZaberPortErrorException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
        </member>
        <member name="M:Zaber.ZaberPortErrorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
            <param name="ex">The exception that caused this one</param>
        </member>
        <member name="M:Zaber.ZaberPortErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized
                data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
        </member>
        <member name="M:Zaber.ZaberPortErrorException.#ctor(Zaber.ZaberPortError)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="errorType">The type of error that caused this exception</param>
        </member>
        <member name="M:Zaber.ZaberPortErrorException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the System.Runtime.Serialization.SerializationInfo
                with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is a null reference.</exception>
        </member>
        <member name="P:Zaber.ZaberPortErrorException.ErrorType">
            <summary>
            The type of error that caused the exception.
            </summary>
        </member>
        <member name="T:Zaber.ErrorResponseException">
            <summary>
            Exception thrown by a <see cref="T:Zaber.Conversation"/> when the response is
            an error.
            </summary>
        </member>
        <member name="M:Zaber.ErrorResponseException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
        </member>
        <member name="M:Zaber.ErrorResponseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
            <param name="ex">The exception that caused this exception</param>
        </member>
        <member name="M:Zaber.ErrorResponseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized
                data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
        </member>
        <member name="M:Zaber.ErrorResponseException.#ctor(Zaber.DeviceMessage)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="response">The response that caused the exception</param>
        </member>
        <member name="M:Zaber.ErrorResponseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the System.Runtime.Serialization.SerializationInfo
                with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is a null reference.</exception>
        </member>
        <member name="P:Zaber.ErrorResponseException.Response">
            <summary>
            The response message from the device.
            </summary>
        </member>
        <member name="T:Zaber.PlugIns.SleepCancellationResponse">
            <summary>
            Specifies how 
            <see cref="M:Zaber.PlugIns.PlugInBase.Sleep(System.Int32,Zaber.PlugIns.SleepCancellationResponse)"/> should
            respond when <see cref="M:Zaber.PlugIns.PlugInBase.Cancel"/> is called.
            </summary>
        </member>
        <member name="F:Zaber.PlugIns.SleepCancellationResponse.Throw">
            <summary>
            Throw an <c>OperationCanceled</c> exception.
            </summary>
        </member>
        <member name="F:Zaber.PlugIns.SleepCancellationResponse.Wake">
            <summary>
            Don't throw an exception. As soon as <see cref="M:Zaber.PlugIns.PlugInBase.Cancel"/>
            is called, return normally from the call to 
            <see cref="M:Zaber.PlugIns.PlugInBase.Sleep(System.Int32,Zaber.PlugIns.SleepCancellationResponse)"/>.
            </summary>
        </member>
        <member name="F:Zaber.PlugIns.SleepCancellationResponse.Ignore">
            <summary>
            Ignore any calls to <see cref="M:Zaber.PlugIns.PlugInBase.Cancel"/>. Always sleep
            the requested time before returning.
            </summary>
        </member>
        <member name="T:Zaber.PlugIns.PlugInPropertyAttribute">
            <summary>
            Mark a plug in's property to be automatically set by the client 
            program.
            </summary>
            <remarks>
            Only properties of certain types will be set:
            <see cref="T:Zaber.ZaberPortFacade"/> will receive the active port facade,
            <see cref="T:Zaber.Conversation"/> will receive the selected conversation from 
            the port facade, System.IO.TextReader will receive a user input stream 
            if the client program has one, System.IO.TextWriter will receive a 
            user output stream if the client has one.
            </remarks>
        </member>
        <member name="T:Zaber.RequestCollectionException">
            <summary>
            Exception thrown by a <see cref="T:Zaber.ConversationCollection"/> when some
            requests in the list fail.
            </summary>
        </member>
        <member name="M:Zaber.RequestCollectionException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
        </member>
        <member name="M:Zaber.RequestCollectionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
            <param name="ex">The exception that caused this exception</param>
        </member>
        <member name="M:Zaber.RequestCollectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized
                data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
        </member>
        <member name="M:Zaber.RequestCollectionException.#ctor(System.Collections.Generic.ICollection{Zaber.ConversationTopic})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="topics">All the topics used in the request, including 
            the one or ones that caused the exception</param>
        </member>
        <member name="M:Zaber.RequestCollectionException.BuildMessage(System.Collections.Generic.ICollection{Zaber.ConversationTopic})">
            <summary>
            Builds a text message that describes why some requests failed.
            </summary>
            <param name="topics">The topics to validate.</param>
            <returns>A text message if some topics were invalid, 
            otherwise an empty string.</returns>
        </member>
        <member name="M:Zaber.RequestCollectionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the System.Runtime.Serialization.SerializationInfo
                with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is a null reference.</exception>
        </member>
        <member name="P:Zaber.RequestCollectionException.Topics">
            <summary>
            All the topics used in the request, including 
            the one or ones that caused the exception.
            </summary>
        </member>
        <member name="T:Zaber.PlugIns.PlugInAttribute">
            <summary>
            Mark a class as a plug in to be used in a Zaber library client program.
            </summary>
            <remarks>
            The class must also derive from System.Windows.Forms.Control. Deriving from 
            UserControl is the simplest.
            </remarks>
        </member>
        <member name="P:Zaber.PlugIns.PlugInAttribute.Name">
            <summary>
            Declare a name to be used for display in the client program. Defaults to
            the class name.
            </summary>
        </member>
        <member name="T:Zaber.PlugIns.Script">
            <summary>
            Represents a script file with features for using templates and compiling.
            </summary>
        </member>
        <member name="M:Zaber.PlugIns.Script.#ctor(System.IO.FileInfo,Zaber.PlugIns.IFileFinder)">
            <summary>
            Create a new instance.
            </summary>
            <param name="file">The file to load the script from.</param>
            <param name="templateFinder">Used to find template files.</param>
        </member>
        <member name="M:Zaber.PlugIns.Script.#ctor(Zaber.PlugIns.ScriptLanguage,Zaber.PlugIns.IFileFinder)">
            <summary>
            Create a new instance without a file.
            </summary>
            <param name="language">The language that this script will be written in.</param>
            <param name="templateFinder">Used to find template files.</param>
        </member>
        <member name="M:Zaber.PlugIns.Script.FindTemplate(System.Boolean)">
            <summary>
            Find a template based on a #template declaration in the script text.
            </summary>
            <param name="shouldThrow">True if this should throw an exception
                when it can't find the file named by the #template declaration.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when it can't find the file 
                named by the #template declaration and shouldThrow is true.</exception>
        </member>
        <member name="M:Zaber.PlugIns.Script.Save">
            <summary>
            Write the current script text back to the file it was loaded from.
            </summary>
        </member>
        <member name="M:Zaber.PlugIns.Script.SaveAs(System.IO.FileInfo)">
            <summary>
            Write the current script text to a new file.
            </summary>
            <param name="newFile">The file to write the script to</param>
        </member>
        <member name="M:Zaber.PlugIns.Script.Build">
            <summary>
            Compile a plug in assembly and find the plug in class within it.
            </summary>
            <returns>An instance of the plug in class</returns>
            <remarks>This takes the script's source code and compiles it in memory to 
            an assembly. It then searches the assembly for a class that 
            implements the <see cref="T:Zaber.PlugIns.IPlugIn"/> interface. It creates an 
            instance and returns it.</remarks>
            <exception cref="T:System.ArgumentException">The compiler generated errors.
            The error details can be found in the <see cref="P:Zaber.PlugIns.Script.CompilerErrors"/> 
            property. Compiler warnings do not cause the exception, but they
            can also be found in the <see cref="P:Zaber.PlugIns.Script.CompilerErrors"/> property.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The #template declaration
                in the script did not match any template file names.</exception>
        </member>
        <member name="P:Zaber.PlugIns.Script.File">
            <summary>
            The file this script was loaded from. May be null.
            </summary>
        </member>
        <member name="P:Zaber.PlugIns.Script.Template">
            <summary>
            The template referenced by the script file. If there is no template
            declaration in the script file, then this will still return a valid
            template, but the template will have empty text and a null file.
            </summary>
        </member>
        <member name="P:Zaber.PlugIns.Script.Text">
            <summary>
            The text from the script file.
            </summary>
        </member>
        <member name="P:Zaber.PlugIns.Script.IsDirty">
            <summary>
            True if the text has been changed since the script was loaded or saved.
            </summary>
        </member>
        <member name="P:Zaber.PlugIns.Script.Language">
            <summary>
            The .NET language that the script will be compiled with.
            </summary>
            <remarks>The choice is based on the script file's extension.</remarks>
        </member>
        <member name="P:Zaber.PlugIns.Script.CompilerErrors">
            <summary>
            Gets the compiler errors that were generated during <see cref="M:Zaber.PlugIns.Script.Build"/>
            </summary>
        </member>
        <member name="T:Zaber.DeviceModes">
            <summary>
            Bits used to set the flags in the <see cref="F:Zaber.Command.SetDeviceMode"/>
            command.
            </summary>
        </member>
        <member name="F:Zaber.DeviceModes.None">
            <summary>
            No modes are enabled
            </summary>
        </member>
        <member name="F:Zaber.DeviceModes.DisableAutoReply">
            <summary>
            Disables ALL replies except those to "return" commands (commands 50 and higher).
            </summary>
        </member>
        <member name="F:Zaber.DeviceModes.EnableAntiBacklashRoutine">
            <summary>
            Enables anti-backlash. On negative moves (retracting), the device 
            will overshoot the desired position by 640 microsteps (assuming 
            64 microsteps/step), reverse direction and approach the requested 
            position from below. On positive moves (extending), the device 
            behaves normally. Care must be taken not to crash the moving 
            payload into a fixed object due to the 640 microsteps overshoot on 
            negative moves.
            </summary>
        </member>
        <member name="F:Zaber.DeviceModes.EnableAntiSticktionRoutine">
            <summary>
            Enables the anti-sticktion routine. On moves less than 640 
            microsteps (assuming 64 microsteps/step), the device will first 
            retract to a position 640 microsteps less than the requested 
            position and approach the requested position from below. Care must 
            be taken not to crash the moving payload into a fixed object due 
            to the 640 microsteps negative move.
            </summary>
        </member>
        <member name="F:Zaber.DeviceModes.DisablePotentiometer">
            <summary>
            Disables the potentiometer preventing manual adjustment of the device.
            </summary>
        </member>
        <member name="F:Zaber.DeviceModes.EnableMoveTracking">
            <summary>
            Enables the Move Tracking response during move commands. The device
            will return its position periodically when a move
            command is executed. The Disable Auto-Reply option above takes 
            precedence over this option. The default is off on all devices.
            Before firmware version 5.14, only Move at Constant Speed commands 
            could generate tracking responses, now all move commands can.
            </summary>
        </member>
        <member name="F:Zaber.DeviceModes.DisableManualMoveTracking">
            <summary>
            Disables the Manual Move Tracking response during manual moves. The 
            Disable Auto-Reply option above takes precedence over this option.
            </summary>
        </member>
        <member name="F:Zaber.DeviceModes.EnableMessageIdsMode">
            <summary>
            Enables the Message Ids Mode. In this mode of communication, only 
            bytes 3 thru 5 are used for data. Byte 6 is used as an ID byte 
            that the user can set to any value they wish. It will be returned 
            unchanged in the reply. Logic Channel Mode allows the user 
            application to monitor communication packets individually to 
            implement error detection and recovery.
            </summary>
        </member>
        <member name="F:Zaber.DeviceModes.HomeStatus">
            <summary>
            This bit is set to 0 automatically on power-up or reset. It is set 
            automatically when the device is homed or when the position is set 
            using command #45. It can be used to detect if a unit has a valid 
            position reference. It can also be set or cleared by the user.
            </summary>
        </member>
        <member name="F:Zaber.DeviceModes.DisableAutoHome">
            <summary>
            Disables auto-home checking. Checking for trigger of home sensor 
            is only done when home command is issued. This allows rotational 
            devices to move multiple revolutions without retriggering the 
            home sensor.
            </summary>
        </member>
        <member name="F:Zaber.DeviceModes.EnableCircularPhaseMicrostepping">
            <summary>
            Enables circular phase micro-stepping mode. Square phase 
            micro-stepping is employed by default. See your user manual or the
            wiki for the differences.
            </summary>
        </member>
        <member name="F:Zaber.DeviceModes.SetHomeSwitchLogic">
            <summary>
            Some devices have active high home limit switches. A value of 1 
            must be set for these devices for the device to home properly. On 
            devices with built in motors and home sensors, the factory default 
            settings will be correct. However, some devices, such as the T-CD 
            series can accept a variety of motors and home sensors. On these 
            devices, this bit may need to be changed from the default setting 
            in order for the home sensor to function correctly. See the 
            recommended settings for your particular device. Damage to the 
            home sensor or actuator may result if this bit is set improperly.
            </summary>
        </member>
        <member name="F:Zaber.DeviceModes.DisablePowerLed">
            <summary>
            Turns off the green power LED. It will still blink briefly, 
            immediately after powerup.
            </summary>
        </member>
        <member name="F:Zaber.DeviceModes.DisableSerialLed">
            <summary>
            Turns off the yellow serial LED.
            </summary>
        </member>
        <member name="T:Zaber.DataPacketEventArgs">
            <summary>
            Notification of a request or response from one of the devices in the chain.
            </summary>
        </member>
        <member name="M:Zaber.DataPacketEventArgs.#ctor(Zaber.DataPacket)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="data">See <see cref="P:Zaber.DataPacketEventArgs.DataPacket"/></param>
        </member>
        <member name="P:Zaber.DataPacketEventArgs.DataPacket">
            <summary>
            Gets the details of the device's request or response.
            </summary>
        </member>
        <member name="T:Zaber.ZaberPortError">
            <summary>
            These error types are copied from <c>System.IO.Ports.SerialError</c>,
            with the addition of <see cref="F:Zaber.ZaberPortError.PacketTimeout"/> and 
            <see cref="F:Zaber.ZaberPortError.InvalidPacket"/>. They are used
            by <see cref="T:Zaber.TSeriesPort"/> to either delegate the <c>SerialPort</c>'s
            <c>ErrorReceived</c> event, or to raise its own 
            <see cref="E:Zaber.TSeriesPort.ErrorReceived"/> event when a partial packet
            times out, or someone calls 
            <see cref="M:Zaber.TSeriesPort.ReportInvalidPacket"/>.
            </summary>
        </member>
        <member name="F:Zaber.ZaberPortError.None">
            <summary>
            No error occurred.
            </summary>
        </member>
        <member name="F:Zaber.ZaberPortError.RXOver">
            <summary>
            An input buffer overflow has occurred. There is either no room in 
            the input buffer, or a character was received after the end-of-file 
            (EOF) character. 
            </summary>
        </member>
        <member name="F:Zaber.ZaberPortError.Overrun">
            <summary>
            A character-buffer overrun has occurred. The next character is lost. 
            </summary>
        </member>
        <member name="F:Zaber.ZaberPortError.RXParity">
            <summary>
            The hardware detected a parity error. 
            </summary>
        </member>
        <member name="F:Zaber.ZaberPortError.Frame">
            <summary>
            The hardware detected a framing error.
            </summary>
        </member>
        <member name="F:Zaber.ZaberPortError.TXFull">
            <summary>
            The application tried to transmit a character, but the output 
            buffer was full. 
            </summary>
        </member>
        <member name="F:Zaber.ZaberPortError.PacketTimeout">
            <summary>
            A partial packet was received, but not completed before the timeout
            expired.
            </summary>
        </member>
        <member name="F:Zaber.ZaberPortError.InvalidPacket">
            <summary>
            A packet was received, but it was reported as invalid.
            </summary>
        </member>
        <member name="T:Zaber.RequestReplacedException">
            <summary>
            This exception is thrown by a <see cref="T:Zaber.Conversation"/> when
            a request gets replaced before responding.
            </summary>
        </member>
        <member name="M:Zaber.RequestReplacedException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
        </member>
        <member name="M:Zaber.RequestReplacedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
            <param name="ex">The exception that caused this one</param>
        </member>
        <member name="M:Zaber.RequestReplacedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized
                data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
        </member>
        <member name="M:Zaber.RequestReplacedException.#ctor(Zaber.DeviceMessage)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="replacementResponse">The response that replaced the expected one.</param>
        </member>
        <member name="M:Zaber.RequestReplacedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the System.Runtime.Serialization.SerializationInfo
                with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is a null reference.</exception>
        </member>
        <member name="P:Zaber.RequestReplacedException.ReplacementResponse">
            <summary>
            The response to the command that replaced the current command.
            </summary>
        </member>
        <member name="T:Zaber.RequestTimeoutException">
            <summary>
            This exception is thrown by a <see cref="T:Zaber.Conversation"/> when
            no response is received within the time limit.
            </summary>
        </member>
        <member name="M:Zaber.RequestTimeoutException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
        </member>
        <member name="M:Zaber.RequestTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
            <param name="ex">The exception that caused this one</param>
        </member>
        <member name="M:Zaber.RequestTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized
                data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
        </member>
        <member name="M:Zaber.RequestTimeoutException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the System.Runtime.Serialization.SerializationInfo
                with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is a null reference.</exception>
        </member>
        <member name="T:Zaber.DeviceListener">
            <summary>
            Registering for response events from a <see cref="T:Zaber.ZaberDevice"/> can be 
            awkward, especially in scripts. This class registers for the response
            events and stores them until you request them with the 
            <see cref="M:Zaber.DeviceListener.NextResponse"/> method. Listening is started automatically 
            when you create a listener, but you can stop and start listening
            with the <see cref="M:Zaber.DeviceListener.Stop"/> and <see cref="M:Zaber.DeviceListener.Start"/> methods.
            </summary>
        </member>
        <member name="M:Zaber.DeviceListener.#ctor(Zaber.ZaberDevice)">
            <summary>
            Create a new instance.
            </summary>
            <param name="device">The device to listen to for responses.</param>
        </member>
        <member name="M:Zaber.DeviceListener.Stop">
            <summary>
            Stop listening for responses.
            </summary>
        </member>
        <member name="M:Zaber.DeviceListener.Start">
            <summary>
            Start listening again after a call to <see cref="M:Zaber.DeviceListener.Stop"/>.
            </summary>
        </member>
        <member name="M:Zaber.DeviceListener.device_MessageReceived(System.Object,Zaber.DeviceMessageEventArgs)">
            <summary>
            Handle a response event from the device.
            </summary>
            <param name="sender">The device sending the response.</param>
            <param name="e">The details of the response.</param>
        </member>
        <member name="M:Zaber.DeviceListener.NextResponse">
            <summary>
            Returns the next response or waits for one to be received.
            </summary>
            <returns>The response message</returns>
            <remarks>
            See <see cref="M:Zaber.DeviceListener.NextResponse(System.Boolean)"/> if you don't want to wait for
            a response to be received.
            </remarks>
        </member>
        <member name="M:Zaber.DeviceListener.NextResponse(System.Boolean)">
            <summary>
            Returns the next response or waits for one to be received.
            </summary>
            <param name="isBlocking">True if the method should wait for a 
            response if there are none already received.</param>
            <returns>The response message or null if no responses have
            been received.</returns>
        </member>
        <member name="P:Zaber.DeviceListener.IsListening">
            <summary>
            Gets a flag showing whether the listener is currently listening for
            responses.
            </summary>
        </member>
        <member name="T:Zaber.ZaberPortErrorReceivedEventArgs">
            <summary>
            Returns a response from one of the devices in the chain.
            </summary>
        </member>
        <member name="M:Zaber.ZaberPortErrorReceivedEventArgs.#ctor(Zaber.ZaberPortError)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="errorType">The type of error that raised this event</param>
        </member>
        <member name="P:Zaber.ZaberPortErrorReceivedEventArgs.ErrorType">
            <summary>
            The type of error that raised the event.
            </summary>
        </member>
        <member name="T:Zaber.PacketConverter">
            <summary>
            This class is used inside the library to convert between the serial port
            byte stream and the <see cref="T:Zaber.DataPacket"/> data structure. It also
            times out when a byte gets 
            dropped and a partial packet is left in the serial port for too long.
            </summary>
        </member>
        <member name="F:Zaber.PacketConverter.PacketSize">
            <summary>
            The size of the byte array that the data gets converted from
            and to.
            </summary>
        </member>
        <member name="M:Zaber.PacketConverter.#ctor">
            <summary>
            Create a new instance.
            </summary>
        </member>
        <member name="M:Zaber.PacketConverter.#ctor(System.Int32)">
            <summary>
            Create a new instance and record packet history.
            </summary>
            <param name="historyCount">The number of packets to record.</param>
            <remarks>Use <see cref="M:Zaber.PacketConverter.FormatHistory"/> to retrieve the
            packet history.</remarks>
        </member>
        <member name="M:Zaber.PacketConverter.ReceiveByte(System.Byte)">
            <summary>
            Add another byte to the incoming byte stream. If this byte 
            completes a packet, then the <see cref="E:Zaber.PacketConverter.DataPacketReceived"/> event
            will be raised.
            </summary>
            <remarks>
            Be sure to call <see cref="M:Zaber.PacketConverter.StartTimer"/> after you finish calling 
            this method for all incoming bytes.
            </remarks>
            <param name="value">The byte to receive</param>
        </member>
        <member name="M:Zaber.PacketConverter.StartTimer">
            <summary>
            Call this when you've finished calling <see cref="M:Zaber.PacketConverter.ReceiveByte(System.Byte)"/>.
            If there is a partial packet remaining, the timer will start. A
            <see cref="E:Zaber.PacketConverter.Timeout"/> event will get triggered if 
            <see cref="M:Zaber.PacketConverter.ReceiveByte(System.Byte)"/> doesn't get called again before the timeout 
            period elapses.
            </summary>
        </member>
        <member name="M:Zaber.PacketConverter.FormatPartialPacket">
            <summary>
            Format the contents of any partial packet as a string of 
            hexadecimal digits.
            </summary>
            <remarks>This is mostly useful for testing purposes.</remarks>
            <returns>A string of hexadecimal digits, possibly empty.</returns>
        </member>
        <member name="M:Zaber.PacketConverter.ReadStopwatch">
            <summary>
            Read the current time from the stop watch.
            </summary>
            <returns>The elapsed time in milliseconds</returns>
            <remarks>This method is just to facilitate testing.</remarks>
        </member>
        <member name="M:Zaber.PacketConverter.FormatHistory">
            <summary>
            Format the history of the last few bytes received along with
            the timing.
            </summary>
            <returns>The formatted history.</returns>
            <exception cref="T:System.InvalidOperationException">when no history count
            was specified for this object at construction.</exception>
        </member>
        <member name="M:Zaber.PacketConverter.GetBytes(Zaber.DataPacket)">
            <summary>
            Convert a <see cref="T:Zaber.DataPacket"/> to a byte stream.
            </summary>
            <param name="dataPacket">The data packet to convert</param>
            <returns>An array of <see cref="F:Zaber.PacketConverter.PacketSize"/> bytes.</returns>
        </member>
        <member name="M:Zaber.PacketConverter.BuildDataPacket">
            <summary>
            Initialize the data structure and read the values from the buffer.
            </summary>
        </member>
        <member name="M:Zaber.PacketConverter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
                resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Zaber.PacketConverter.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
                resetting unmanaged resources.
            </summary>
            <param name="isDisposing">True if the object is being disposed, and not
            garbage collected.</param>
        </member>
        <member name="E:Zaber.PacketConverter.Timeout">
            <summary>
            Raised when a partial packet is received but not completed before
            the <see cref="P:Zaber.PacketConverter.MillisecondsTimeout"/> expires.
            </summary>
        </member>
        <member name="E:Zaber.PacketConverter.DataPacketReceived">
            <summary>
            Raised when a complete packet of <see cref="F:Zaber.PacketConverter.PacketSize"/> bytes is
            received. The packet is included in the event arguments.
            </summary>
            <remarks>
            Be careful when handling this event, because it is usually raised 
            from a background thread. See 
            <see cref="E:Zaber.IZaberPort.DataPacketReceived"/> for details.
            </remarks>
        </member>
        <member name="P:Zaber.PacketConverter.MillisecondsTimeout">
            <summary>
            The length of time to wait after calling <see cref="M:Zaber.PacketConverter.StartTimer"/> 
            before raising the <see cref="E:Zaber.PacketConverter.Timeout"/> event.
            </summary>
        </member>
        <member name="T:Zaber.PlugIns.ScriptTemplate">
            <summary>
            Holds the details about a script template
            </summary>
        </member>
        <member name="M:Zaber.PlugIns.ScriptTemplate.#ctor(System.IO.FileInfo)">
            <summary>
            Create a new instance.
            </summary>
            <param name="file">The file to read the template text from. Null is
                equivalent to an empty file.</param>
        </member>
        <member name="P:Zaber.PlugIns.ScriptTemplate.File">
            <summary>
            The file that the template text came from.
            </summary>
        </member>
        <member name="P:Zaber.PlugIns.ScriptTemplate.Text">
            <summary>
            Get the text from the template file.
            </summary>
            <exception cref="T:System.Security.SecurityException">The caller does not have the 
                required permission to read the file.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The path is a directory.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, 
                such as being on an unmapped drive.</exception>
        </member>
        <member name="T:Zaber.PlugIns.ScriptCompiler">
            <summary>
            Compiles a plug in assembly in memory from source code.
            </summary>
        </member>
        <member name="M:Zaber.PlugIns.ScriptCompiler.#ctor(System.CodeDom.Compiler.CompilerInfo)">
            <summary>
            Create a new instance
            </summary>
            <param name="compilerInfo">The language compiler to use.</param>
        </member>
        <member name="M:Zaber.PlugIns.ScriptCompiler.Compile(System.String)">
            <summary>
            Compile a plug in assembly and find the plug in class within it.
            </summary>
            <param name="sourceCode">The source code for the plug in class</param>
            <returns>An instance of the plug in class</returns>
            <remarks>This takes the source code and compiles it in memory to 
            an assembly. It then searches the assembly for a class that 
            implements the <see cref="T:Zaber.PlugIns.IPlugIn"/> interface. It creates an 
            instance and returns it.</remarks>
            <exception cref="T:System.ArgumentException">The compiler generated errors.
            The error details can be found in the <see cref="P:Zaber.PlugIns.ScriptCompiler.Errors"/> 
            property. Compiler warnings do not cause the exception, but they
            can also be found in the <see cref="P:Zaber.PlugIns.ScriptCompiler.Errors"/> property.
            </exception>
        </member>
        <member name="P:Zaber.PlugIns.ScriptCompiler.Errors">
            <summary>
            Compiler errors and warnings generated by the last call to 
            <see cref="M:Zaber.PlugIns.ScriptCompiler.Compile(System.String)"/>.
            </summary>
        </member>
        <member name="T:Zaber.ZaberPortFacade">
            <summary>
            This is the main class that most applications will interact with. 
            </summary>
            <remarks>
            The standard pattern is:
            <list type="number">
            <item>Call <see cref="M:Zaber.ZaberPortFacade.GetPortNames"/> and display them to the user.</item>
            <item>When the user picks one, pass it to <see cref="M:Zaber.ZaberPortFacade.Open(System.String)"/>.</item>
            <item>Either call <see cref="M:Zaber.ZaberPortFacade.GetDevice(System.Byte)"/> to get a specific device, call
                <see cref="P:Zaber.ZaberPortFacade.Devices"/> to get the all of them, call 
                <see cref="M:Zaber.ZaberPortFacade.GetConversation(System.Byte)"/> to get a specific conversation, or
                call <see cref="P:Zaber.ZaberPortFacade.Conversations"/> to get all of them.</item>
            <item>Either make requests from conversations or send commands to 
                devices and register to receive the response events.</item>
            </list>
            See the ZaberDeviceDemo and ZaberConversationDemo for some example code.
            </remarks>
        </member>
        <member name="M:Zaber.ZaberPortFacade.GetDevice(System.Byte)">
            <summary>
            Look up a device by device number.
            </summary>
            <param name="deviceNumber">The number of the device you want.</param>
            <returns>The device with the requested device number.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If no device has the 
            requested device number.</exception>
            <seealso cref="M:Zaber.ZaberPortFacade.ContainsDevice(System.Byte)"/>
        </member>
        <member name="M:Zaber.ZaberPortFacade.ContainsDevice(System.Byte)">
            <summary>
            Check to see if there is a device with the given device number.
            </summary>
            <param name="deviceNumber">The number of the device you want.</param>
            <returns>true if the device exists.</returns>
        </member>
        <member name="M:Zaber.ZaberPortFacade.GetConversation(System.Byte)">
            <summary>
            Look up a conversation by device number.
            </summary>
            <param name="deviceNumber">The number of the device whose 
            conversation you want.</param>
            <returns>The conversation with the requested device number.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If no conversation has the
            requested device number.</exception>
            <remarks>To avoid the exception, check <see cref="M:Zaber.ZaberPortFacade.ContainsDevice(System.Byte)"/>
            before calling this method. Every device has a matching 
            conversation.</remarks>
        </member>
        <member name="M:Zaber.ZaberPortFacade.ContainsConversation(System.Byte)">
            <summary>
            Check to see if there is a conversation with the given device number.
            </summary>
            <param name="deviceNumber">The number of the device whose
            conversation you want.</param>
            <returns>true if the conversation exists.</returns>
        </member>
        <member name="M:Zaber.ZaberPortFacade.Open(System.String)">
            <summary>
            Open the port and check what devices are present.
            </summary>
            <param name="portName">One of the port names returned by 
                <see cref="M:Zaber.ZaberPortFacade.GetPortNames"/>.</param>
            <remarks>Be sure to call <see cref="M:Zaber.ZaberPortFacade.Close"/> when you're finished.</remarks>
            <exception cref="T:Zaber.LoopbackException">A loopback connection was 
            detected on the serial port. To recover from this exception, 
            either physically remove the loopback connection or call 
            <see cref="M:Zaber.ZaberPortFacade.OpenWithoutQuery(System.String)"/>.</exception>
        </member>
        <member name="M:Zaber.ZaberPortFacade.OpenWithoutQuery(System.String)">
            <summary>
            Open the port without checking what devices are present.
            </summary>
            <param name="portName">One of the port names returned by 
                <see cref="M:Zaber.ZaberPortFacade.GetPortNames"/>.</param>
            <remarks>Be sure to call <see cref="M:Zaber.ZaberPortFacade.Close"/> when you're finished.</remarks>
        </member>
        <member name="M:Zaber.ZaberPortFacade.GetPortNames">
            <summary>
            Get a list of all available ports.
            </summary>
            <returns>An array of port names, one of which should be passed to 
            <see cref="M:Zaber.ZaberPortFacade.Open(System.String)"/>.</returns>
        </member>
        <member name="M:Zaber.ZaberPortFacade.Close">
            <summary>
            Close and release the serial port. This must be called to avoid
            locking the port when you are finished with it.
            </summary>
        </member>
        <member name="M:Zaber.ZaberPortFacade.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
                resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Zaber.ZaberPortFacade.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
                resetting unmanaged resources.
            </summary>
            <param name="isDisposing">True if the object is being disposed, and not
            garbage collected.</param>
        </member>
        <member name="M:Zaber.ZaberPortFacade.GetConversationCollection(System.Byte)">
            <summary>
            Look up a conversation collection by device number.
            </summary>
            <param name="deviceNumber">The number of the device whose 
            conversation you want.</param>
            <returns>The conversation collection with the requested device number.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If no conversation has the
            requested device number.</exception>
            <exception cref="T:System.InvalidCastException">If the conversation is a single
            conversation instead of a collection.</exception>
            <remarks>
            To avoid the exceptions, you can safely get a conversation collection
            as follows:
            <example>
            if (portFacade.ContainsDevice(deviceNumber))
            {
                ConversationCollection conversations =
                    portFacade.GetConversation(deviceNumber)
                    as ConversationCollection;
                if (conversations != null)
                {
                    // Use conversations for something
                }
            }
            </example>
            </remarks>
        </member>
        <member name="M:Zaber.ZaberPortFacade.GetDeviceCollection(System.Byte)">
            <summary>
            Look up a device collection by device number.
            </summary>
            <param name="deviceNumber">The number of the device you want.</param>
            <returns>The device with the requested device number.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If no device has the 
            requested device number.</exception>
            <exception cref="T:System.InvalidCastException">If the device is a single
            device instead of a collection.</exception>
            <remarks>
            To avoid the exceptions, you can safely get a device collection
            as follows:
            <example>
            if (portFacade.ContainsDevice(deviceNumber))
            {
                DeviceCollection devices =
                    portFacade.GetDevice(deviceNumber)
                    as DeviceCollection;
                if (devices != null)
                {
                    // Use devices for something
                }
            }
            </example>
            </remarks>
        </member>
        <member name="P:Zaber.ZaberPortFacade.CurrentState">
            <summary>
            Gets the current state of the facade.
            </summary>
        </member>
        <member name="P:Zaber.ZaberPortFacade.Devices">
            <summary>
            A collection of all the devices attached to the port.
            </summary>
        </member>
        <member name="P:Zaber.ZaberPortFacade.Conversations">
            <summary>
            A collection of conversations for all the devices attached to the port.
            </summary>
        </member>
        <member name="P:Zaber.ZaberPortFacade.SelectedConversation">
            <summary>
            Get or set the currently selected conversation.
            </summary>
            <remarks>
            The meaning of this property is entirely up to the client program.
            However, whenever this property changes, it will raise the
            <see cref="E:Zaber.ZaberPortFacade.SelectedConversationChanged"/> event. Every time the
            port facade is opened or closed, this is set to the conversation 
            for device number 0, or all devices.
            </remarks>
        </member>
        <member name="E:Zaber.ZaberPortFacade.SelectedConversationChanged">
            <summary>
            Raised when the current conversation has changed.
            </summary>
            <remarks>Get the <see cref="T:Zaber.Conversation"/> property
            to see what the new one is.</remarks>
        </member>
        <member name="P:Zaber.ZaberPortFacade.DeviceTypes">
            <summary>
            A list of the known device types.
            </summary>
        </member>
        <member name="P:Zaber.ZaberPortFacade.DefaultDeviceType">
            <summary>
            A device type that will be used for any device ids not found in 
            <see cref="P:Zaber.ZaberPortFacade.DeviceTypes"/>. Effectively, this is just used to 
            specify a generic set of commands and settings.
            </summary>
        </member>
        <member name="P:Zaber.ZaberPortFacade.Port">
            <summary>
            Gets or sets the port that this facade is attached to.
            </summary>
        </member>
        <member name="P:Zaber.ZaberPortFacade.IsInvalidateEnabled">
            <summary>
            Gets or sets a flag that enables or disables the 
            <see cref="E:Zaber.ZaberPortFacade.Invalidated"/> event. Enabled by default.
            </summary>
        </member>
        <member name="P:Zaber.ZaberPortFacade.IsCollisionDetected">
            <summary>
            Gets a flag that shows whether two devices responded with the
            same device number.
            </summary>
            <remarks>
            If this is true, the client should send <see cref="F:Zaber.Command.Renumber"/>
            to device number 0 to force all devices to choose unique device 
            numbers.
            </remarks>
        </member>
        <member name="P:Zaber.ZaberPortFacade.AreMessageIdsEnabled">
            <summary>
            Enables or disables message ids mode on all devices attached 
            to the port.
            </summary>
            <remarks>
            <para>Message ids mode uses id numbers to match each response to 
            the request that triggered it. Message ids are also known as
            logical channels.</para>
            <para>The Zaber port facade forces you to keep the message ids
            mode the same on all devices attached to the port, either all on
            or all off. This avoids major confusion after a renumber request.
            Setting this property will trigger a "Return Setting" command
            for the device mode. The Zaber port facade will automatically send 
            "Set Device Mode" commands to switch any devices that don't match
            the requested setting. It will continue to do this whenever it
            sees a "Set Device Mode" response with the wrong setting of
            message ids mode.</para>
            </remarks>
        </member>
        <member name="P:Zaber.ZaberPortFacade.AreDeviceNumbersValidated">
            <summary>
            Get or set a flag that will raise a port error for an invalid 
            packet if a response packet has an unknown device number.
            </summary>
        </member>
        <member name="P:Zaber.ZaberPortFacade.QueryTimeoutTimer">
            <summary>
            Gets or sets a timeout timer used to time how long we wait for
            responses from all devices.
            </summary>
        </member>
        <member name="P:Zaber.ZaberPortFacade.QueryTimeout">
            <summary>
            Gets or sets the time to wait in milliseconds for responses from 
            all devices.
            </summary>
        </member>
        <member name="E:Zaber.ZaberPortFacade.Opened">
            <summary>
            Raised when the port facade has finished opening.
            </summary>
        </member>
        <member name="E:Zaber.ZaberPortFacade.Closed">
            <summary>
            Raised when the port facade is closed.
            </summary>
        </member>
        <member name="E:Zaber.ZaberPortFacade.Invalidated">
            <summary>
            Raised when the port facade is invalidated and should be reopened.
            </summary>
            <remarks>The port facade is invalidated when the list of connected
            devices may have become inaccurate. This happens after a response 
            to the Renumber command, the RestoreSettings command, or
            the SetAlias command. If client applications want to be sure the
            device list is accurate, they should call <see cref="M:Zaber.ZaberPortFacade.Close"/> and 
            then <see cref="M:Zaber.ZaberPortFacade.Open(System.String)"/> to reopen the port and requery the list of 
            connected devices. The event is only raised the first time the
            facade is invalidated, so if two renumber commands are sent without
            reopening the port facade in between, only the first one will raise
            this event.
            </remarks>
        </member>
        <member name="P:Zaber.ZaberPortFacade.IsOpen">
            <summary>
            Is the port open?
            </summary>
            <remarks>This doesn't always agree with <see cref="P:Zaber.ZaberPortFacade.CurrentState"/>.
            For example, after a USB-to-serial adapter has been disconnected.</remarks>
        </member>
        <member name="T:Zaber.PlugIns.FileFinder">
            <summary>
            Searches for files within a named folder, but looks up the directory
            tree to find that folder.
            </summary>
        </member>
        <member name="M:Zaber.PlugIns.FileFinder.#ctor(System.IO.DirectoryInfo,System.String)">
            <summary>
            Create a new instance
            </summary>
            <param name="startDirectory">The directory to start searching from.</param>
            <param name="folderName">The folder to look for</param>
        </member>
        <member name="M:Zaber.PlugIns.FileFinder.FindDefaultFile(Zaber.PlugIns.ScriptLanguage)">
            <summary>
            Find the default file in the folder.
            </summary>
            <param name="language">Specifies the file extensions you want to
            look for</param>
            <returns>The requested file or null if none could be found.</returns>
            <remarks>We look for files that are named Default.* where .* is one
            of the extensions supported by the language.</remarks>
        </member>
        <member name="M:Zaber.PlugIns.FileFinder.FindFile(System.String)">
            <summary>
            Find the named file in the folder.
            </summary>
            <param name="fileName">The name of the file to find. It may contain wild cards.</param>
            <returns>The requested file, or null if it could not be found</returns>
            <remarks>We search the folder for the named file. If
            more than one file matches the request, the first one is returned.</remarks>
        </member>
        <member name="M:Zaber.PlugIns.FileFinder.IsFindable(System.String)">
            <summary>
            Checks if a file could be found by this finder.
            </summary>
            <param name="fileName">The full path to the file.</param>
            <returns>True if the file is in the directory or one of
            its subdirectories, otherwise false.</returns>
        </member>
        <member name="P:Zaber.PlugIns.FileFinder.Directory">
            <summary>
            Gets the directory that this finder is using.
            </summary>
        </member>
        <member name="T:Zaber.RequestCanceledException">
            <summary>
            This exception is thrown by a <see cref="T:Zaber.Conversation"/> when
            a request is canceled by another thread.
            </summary>
        </member>
        <member name="M:Zaber.RequestCanceledException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
        </member>
        <member name="M:Zaber.RequestCanceledException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
            <param name="ex">The exception that caused this one</param>
        </member>
        <member name="M:Zaber.RequestCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized
                data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
        </member>
        <member name="M:Zaber.RequestCanceledException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the System.Runtime.Serialization.SerializationInfo
                with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is a null reference.</exception>
        </member>
        <member name="T:Zaber.ConversationTopicCollection">
            <summary>
            A collection of <see cref="T:Zaber.ConversationTopic"/> objects. It's used to represent
            a topic in a <see cref="T:Zaber.ConversationCollection"/>.
            </summary>
            <remarks>
            This class is both a ConversationTopic and a collection of them. Waiting for it
            waits for all its items to complete. The class is almost completely thread-safe.
            The only exception is the <see cref="M:Zaber.ConversationTopicCollection.GetEnumerator"/> method. Enumerating through
            the collection while other threads are marking its items as completed or adding or
            removing items is not safe. A safe alternative would be to call <see cref="M:Zaber.ConversationTopicCollection.CopyTo(Zaber.ConversationTopic[],System.Int32)"/>
            and then iterate through the array, but remember that you wouldn't see any changes to the
            collection that occurred after the call to CopyTo.
            </remarks>
        </member>
        <member name="M:Zaber.ConversationTopicCollection.Wait">
            <summary>
            Blocks the current thread until the topic is completed.
            </summary>
            <returns>This method always returns true.</returns>
            <remarks>
            The topic can be completed by setting any of these properties:
            <see cref="P:Zaber.ConversationTopicCollection.Response"/>, <see cref="P:Zaber.ConversationTopicCollection.ZaberPortError"/>,
            <see cref="P:Zaber.ConversationTopicCollection.ReplacementResponse"/>. However, if the topic 
            collection is empty, this method immediately returns true
            without waiting.
            </remarks>
        </member>
        <member name="M:Zaber.ConversationTopicCollection.Wait(Zaber.TimeoutTimer)">
            <summary>
            Blocks the current thread until the topic is completed or the
            timer times out.
            </summary>
            <param name="timeoutTimer">The timer to wait with.</param>
            <returns>True if the topic completed before the timer expired, 
            otherwise false.</returns>
            <remarks>
            The topic can be completed by setting any of these properties:
            <see cref="P:Zaber.ConversationTopicCollection.Response"/>, <see cref="P:Zaber.ConversationTopicCollection.ZaberPortError"/>,
            <see cref="P:Zaber.ConversationTopicCollection.ReplacementResponse"/>. However, if the topic 
            collection is empty, this method immediately returns true
            without waiting.
            </remarks>
        </member>
        <member name="M:Zaber.ConversationTopicCollection.Cancel">
            <summary>
            Stop waiting for a response.
            </summary>
            <remarks>Sets IsCanceled to true and marks the topic complete.</remarks>
        </member>
        <member name="M:Zaber.ConversationTopicCollection.Validate">
            <summary>
            Validates that the request has been completed successfully.
            </summary>
            <remarks>
            If you want to check whether the response is valid without throwing
            an exception, use <see cref="P:Zaber.ConversationTopicCollection.IsValid"/> instead.
            </remarks>
            <exception cref="T:Zaber.RequestCollectionException">Multiple requests were
            made together, and some of them failed.</exception>
        </member>
        <member name="M:Zaber.ConversationTopicCollection.Add(Zaber.ConversationTopic)">
            <summary>
            Adds a topic to the collection.
            </summary>
            <param name="item">The topic to add to the collection</param>
        </member>
        <member name="M:Zaber.ConversationTopicCollection.Clear">
            <summary>
            Removes all topics from the collection.
            </summary>
        </member>
        <member name="M:Zaber.ConversationTopicCollection.Contains(Zaber.ConversationTopic)">
            <summary>
            Determines whether the collection contains a specific topic.
            </summary>
            <param name="item">The topic to locate in the collection</param>
            <returns>true if the topic is found in the collection, otherwise false.</returns>
        </member>
        <member name="M:Zaber.ConversationTopicCollection.CopyTo(Zaber.ConversationTopic[],System.Int32)">
             <summary>
             Copies the topics in the collection to a
                 System.Array, starting at a particular System.Array index.
             </summary>
             <param name="array">The one-dimensional System.Array that is the destination of the topics
                 copied from the collection. The System.Array must
                 have zero-based indexing.
            </param>
             <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
             <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
             <exception cref="T:System.ArgumentNullException">array is null.</exception>
             <exception cref="T:System.ArgumentException">arrayIndex is equal 
             to or greater than the
                 length of array.-or-The number of elements in the source collection
                 is greater than the available space from arrayIndex to the end of the destination
                 array.</exception>
        </member>
        <member name="M:Zaber.ConversationTopicCollection.Remove(Zaber.ConversationTopic)">
            <summary>
            Removes the first occurrence of a specific item from the collection.
            </summary>
            <param name="item">The item to remove from the collection.</param>
            <returns>true if the item was successfully removed from the collection,
                otherwise false. This method also returns false if the item is not found in
                the collection.</returns>
        </member>
        <member name="M:Zaber.ConversationTopicCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>an enumerator that iterates through the collection.</returns>
            <remarks>
            Iterating through the collection is not thread-safe. A safe 
            alternative would be to call <see cref="M:Zaber.ConversationTopicCollection.CopyTo(Zaber.ConversationTopic[],System.Int32)"/>
            and then iterate through the array, but remember that you wouldn't 
            see any changes to the
            collection that occurred after the call to CopyTo.
            </remarks>
        </member>
        <member name="M:Zaber.ConversationTopicCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>an enumerator that iterates through the collection.</returns>
            <remarks>
            Iterating through the collection is not thread-safe. A safe 
            alternative would be to call <see cref="M:Zaber.ConversationTopicCollection.CopyTo(Zaber.ConversationTopic[],System.Int32)"/>
            and then iterate through the array, but remember that you wouldn't 
            see any changes to the
            collection that occurred after the call to CopyTo.
            </remarks>
        </member>
        <member name="M:Zaber.ConversationTopicCollection.IndexOf(Zaber.ConversationTopic)">
            <summary>
                Searches for the specified item and returns the zero-based index of the
                first occurrence within the entire list.
            </summary>
            <param name="item">The item to locate in the list. The value
                can be null.</param>
            <returns>The zero-based index of the first occurrence of item within the entire 
            list, if found; otherwise, –1.</returns>
        </member>
        <member name="M:Zaber.ConversationTopicCollection.Insert(System.Int32,Zaber.ConversationTopic)">
            <summary>
                Inserts an item into the list at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be null.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.  
            -or- index is greater than <see cref="P:Zaber.ConversationTopicCollection.Count"/>.</exception>
        </member>
        <member name="M:Zaber.ConversationTopicCollection.RemoveAt(System.Int32)">
            <summary>
                Removes the item at the specified index of the list.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.  
            -or- index is equal to or greater than <see cref="P:Zaber.ConversationTopicCollection.Count"/>.</exception>
        </member>
        <member name="P:Zaber.ConversationTopicCollection.Response">
            <summary>
            Gets the details of the response received from the device.
            </summary>
            <remarks>Actually delegates to the first topic in the collection.
            Setting this is not supported.</remarks>
        </member>
        <member name="P:Zaber.ConversationTopicCollection.ReplacementResponse">
            <summary>
            Gets the details of a response when this topic's request has
            been replaced by another.
            </summary>
            <remarks>Actually delegates to the first topic in the collection.
            Setting this is not supported.</remarks>
        </member>
        <member name="P:Zaber.ConversationTopicCollection.ZaberPortError">
            <summary>
            Gets the port error that was detected while waiting
            for a response.
            </summary>
            <remarks>Actually delegates to the first topic in the collection.
            Setting this is not supported.</remarks>
        </member>
        <member name="P:Zaber.ConversationTopicCollection.IsCanceled">
            <summary>
            Get a flag showing whether this topic was canceled by a call to
            <see cref="M:Zaber.ConversationTopicCollection.Cancel"/>.
            </summary>
            <remarks>Actually delegates to the first topic in the collection.
            </remarks>
        </member>
        <member name="P:Zaber.ConversationTopicCollection.IsValid">
            <summary>
            Gets a flag showing whether the request has been completed successfully.
            </summary>
            <seealso cref="M:Zaber.ConversationTopicCollection.Validate"/>
        </member>
        <member name="P:Zaber.ConversationTopicCollection.Count">
            <summary>
            Gets the number of items contained in the collection.
            </summary>
        </member>
        <member name="P:Zaber.ConversationTopicCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Zaber.ConversationTopicCollection.Item(System.Int32)">
            <summary>
                Gets or sets the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to get or set.</param>
            <returns>The item at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.  
            -or- index is equal to or greater than <see cref="P:Zaber.ConversationTopicCollection.Count"/>.</exception>
            <remarks>
            Note that index is not necessarily the same as device number.
            </remarks>
        </member>
        <member name="T:Zaber.ZaberPortFacadeState">
            <summary>
            Lists the possible states that the <see cref="T:Zaber.ZaberPortFacade"/> can be in.
            </summary>
        </member>
        <member name="F:Zaber.ZaberPortFacadeState.Closed">
            <summary>
            Starting state. The only things available are a device 
            collection and conversation collection for all devices
            (device number 0).
            </summary>
        </member>
        <member name="F:Zaber.ZaberPortFacadeState.QueryingDevices">
            <summary>
            COM port is open, but the devices are still being queried,
            still nothing available beyond device 0.
            </summary>
        </member>
        <member name="F:Zaber.ZaberPortFacadeState.Open">
            <summary>
            Everything is now available.
            </summary>
        </member>
        <member name="T:Zaber.ReadOnlySettingInfo">
            <summary>
            Descriptive information about a read-only setting that Zaber devices 
            support.
            </summary>
            <remarks>This class is specific to commands that return the value of a 
            read-only device setting.</remarks>
        </member>
        <member name="P:Zaber.ReadOnlySettingInfo.IsReadOnlySetting">
            <summary>
            Is this command actually a read-only setting?
            </summary>
            <remarks>
            Read-only settings are read differently from other settings. Just
            send the command and the value will be returned.
            </remarks>
        </member>
        <member name="T:Zaber.PlugIns.CodeBuilder">
            <summary>
            Combines template code with a script's code to create source code for a
            class that can be compiled.
            </summary>
        </member>
        <member name="M:Zaber.PlugIns.CodeBuilder.Build">
            <summary>
            Build the source code from the <see cref="P:Zaber.PlugIns.CodeBuilder.TemplateReader"/> and 
            <see cref="P:Zaber.PlugIns.CodeBuilder.ScriptReader"/>.
            </summary>
            <returns>The combined source code</returns>
        </member>
        <member name="P:Zaber.PlugIns.CodeBuilder.ScriptReader">
            <summary>
            The input source for the script file that will be inserted into the template.
            </summary>
        </member>
        <member name="P:Zaber.PlugIns.CodeBuilder.TemplateReader">
            <summary>
            The input source for the template file that will be combined with the script.
            </summary>
            <remarks>
            The template is searched for the first line that contains the marker text
            $INSERT-SCRIPT-HERE$ and that entire line is replaced by the contents
            of the script.
            </remarks>
        </member>
        <member name="P:Zaber.PlugIns.CodeBuilder.TemplateName">
            <summary>
            Searches the script for a #template directive and returns the template name if it
            finds one. Returns null if no template is found.
            </summary>
            <example>
            If the script contains a line like this:
            #template(MyTemplate) x, y, z
            this will return "MyTemplate". Anything after the closing parenthesis is ignored
            and excluded from the script.
            </example>
        </member>
        <member name="P:Zaber.PlugIns.CodeBuilder.LineOffset">
            <summary>
            Returns the number of lines that were found in the template before 
            the marker text.
            </summary>
            <remarks>This is useful for translating line numbers from the 
            combined source code back to line numbers in the script.</remarks>
        </member>
    </members>
</doc>
