I have tried to create the backbone of the program with this commit as well as add the UI.
The installation files for the libaries I used can be found in the dropbox folder, but they are:

pygtk-all-in-one-2.24.1.win32-py2.7
Glade3-3.6.1

Code guidelines are a mix of pep-0008, Google's standards, and personal preferences.

In terms of the framework designs I implemented, a facade was placed between the UI and the movement controls. This facade will be used for all commands from the UI. UI logic processing should be at a minimum, which is how I implemented it. There is probably a better way to pass along the constants, but I left it as is for now.

No circular imports will be used and they weren't with this commit as a start. The Logging system was implemented using the Borg design pattern as outlined in http://code.activestate.com/recipes/66531-singleton-we-dont-need-no-stinkin-singleton-the-bo/
It was designed so it would be easy to call, with log.log_text(), and be easily changed without affecting code that calls it.

Namespaces are a huge thing. Import x.y as y is important so that people don't import fcns or classes, only modules will be imported. This will enforce some OO standards and stop people from hacking stuff together.

This brain dump is also a new thing. I want people to start doing it so that when people look back at what you did, they can try to piece it together a bit better on their own before asking questions. Or in the case a bus hits you, we can still understand your code while you're in a coma.

The windows in the UI are implemented as modal. None of the data is saved until the window is closed. This is because I was having problems overriding the escape button in the top right. I was able to capture the event, but not stop the propogation of the window being destroyed. This meant that if you hit the escape button, the popup wouldn't open with the content anymore, it would be empty. So I run and close in the open function; which means state changes will have to occur when the window is closed for easiest implementation sake.

Also, if you create a new folder within the file system, add '__init__.py', which can be a blank file, to the folder. This allows you to import from it.

A basic strategy pattern was implemented for different control systems. The constant is specified in main.py through the UI (hardcoded to ACTUATORS, and no support for change in the UI at the moment either). This will affect what functions the facade calls. I believe this is the most appropriate way to do it, but the solution is up for debate.

Run the program with the command "python main.py"